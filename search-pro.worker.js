const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":76,\"nextId\":76,\"documentIds\":{\"0\":\"0\",\"1\":\"2\",\"2\":\"3\",\"3\":\"3#架构\",\"4\":\"3#安装-debian\",\"5\":\"3#常见命令\",\"6\":\"3#基本操作\",\"7\":\"3#镜像管理\",\"8\":\"3#容器管理\",\"9\":\"3#网络管理\",\"10\":\"3#卷管理\",\"11\":\"3#使用dockerfile构建镜像\",\"12\":\"3#流程\",\"13\":\"3#常用指令\",\"14\":\"3#例\",\"15\":\"3#将镜像发布到阿里云\",\"16\":\"4\",\"17\":\"4#引入依赖\",\"18\":\"4#application-yml配置\",\"19\":\"4#注解使用\",\"20\":\"4#dubboservice-注解\",\"21\":\"4#dubboreference-注解\",\"22\":\"4#enabledubbo-注解\",\"23\":\"4#扩展注解配置\",\"24\":\"4#使用-java-config-代替注解\",\"25\":\"5\",\"26\":\"5#安装\",\"27\":\"5#初始化与设置远程\",\"28\":\"5#提交规范\",\"29\":\"5#commit-message格式\",\"30\":\"5#分支管理\",\"31\":\"6\",\"32\":\"6#引入依赖\",\"33\":\"6#编写配置类\",\"34\":\"6#编写相关功能\",\"35\":\"7\",\"36\":\"7#门面模式\",\"37\":\"7#日志门面\",\"38\":\"7#日志实现\",\"39\":\"7#使用\",\"40\":\"8\",\"41\":\"8#什么是kafka\",\"42\":\"8#核心概念\",\"43\":\"8#事件\",\"44\":\"8#topic-主题\",\"45\":\"8#partition-分区\",\"46\":\"8#producer-生产者\",\"47\":\"8#consumer-消费者\",\"48\":\"8#broker\",\"49\":\"8#replicas-副本\",\"50\":\"8#docker部署kafka\",\"51\":\"8#spring-boot集成kafka\",\"52\":\"9\",\"53\":\"9#lambda表达式\",\"54\":\"9#定义\",\"55\":\"9#方法引用\",\"56\":\"9#函数式接口\",\"57\":\"9#定义-1\",\"58\":\"9#functionalinterface注解\",\"59\":\"9#常用函数式接口\",\"60\":\"9#consumer-t-消费型接口\",\"61\":\"9#supplier-t-供给型接口\",\"62\":\"9#function-t-r-函数型接口\",\"63\":\"9#predicate-t-断言型接口\",\"64\":\"10\",\"65\":\"10#运行时解析\",\"66\":\"10#编译时解析\",\"67\":\"11\",\"68\":\"11#引入依赖\",\"69\":\"11#添加数据库配置信息\",\"70\":\"11#mybatis相关配置\",\"71\":\"12\",\"72\":\"13\",\"73\":\"14\",\"74\":\"15\",\"75\":\"16\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[1,1],\"2\":[1],\"3\":[1,7],\"4\":[3,103],\"5\":[1],\"6\":[1,10],\"7\":[1,17],\"8\":[1,60],\"9\":[1,15],\"10\":[1,12],\"11\":[1],\"12\":[1,16],\"13\":[1,99],\"14\":[1,41],\"15\":[1,4],\"16\":[1,50],\"17\":[1,45],\"18\":[2,69],\"19\":[1,15],\"20\":[3,36],\"21\":[3,24],\"22\":[3,36],\"23\":[1,28],\"24\":[4,35],\"25\":[1],\"26\":[1,5],\"27\":[1,24],\"28\":[1],\"29\":[2,40],\"30\":[1,18],\"31\":[1],\"32\":[1,13],\"33\":[1,31],\"34\":[1,83],\"35\":[1,5],\"36\":[1,16],\"37\":[1,16],\"38\":[1,120],\"39\":[1,80],\"40\":[1],\"41\":[2,17],\"42\":[1],\"43\":[1,29],\"44\":[2,4],\"45\":[2,12],\"46\":[2,11],\"47\":[2,20],\"48\":[1,7],\"49\":[2,15],\"50\":[1,73],\"51\":[2,194],\"52\":[1],\"53\":[1],\"54\":[1,16],\"55\":[1,25],\"56\":[1],\"57\":[1,14],\"58\":[2,6],\"59\":[1],\"60\":[2,35],\"61\":[2,13],\"62\":[2,41],\"63\":[2,29],\"64\":[1,17],\"65\":[2,15],\"66\":[1,57],\"67\":[1],\"68\":[1,31],\"69\":[1,26],\"70\":[1,88],\"71\":[1,3],\"72\":[1],\"73\":[1],\"74\":[1],\"75\":[1]},\"averageFieldLength\":[1.3421052631578947,32.50438722159068],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"winkit\"]},\"1\":{\"h\":\"rust\",\"t\":[\"dspfomrepv\"]},\"2\":{\"h\":\"docker相关\"},\"3\":{\"h\":\"架构\",\"t\":[\"docker build 构建镜像 docker pull 从仓库拉取镜像 docker run 运行镜像\"]},\"4\":{\"h\":\"安装（debian）\",\"t\":[\"详见:\",\"https://docs.docker.com/engine/install/debian/\",\"卸载冲突包\",\"for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\",\"设置docker的apt存储库\",\"# Add Docker's official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\\\ \\\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\\ $(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\") stable\\\" | \\\\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update\",\"安装docker包\",\"sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\",\"验证\",\"sudo docker run hello-world\",\"此命令下载测试映像并在容器中运行。容器运行时，它会打印一条确认消息并退出。\",\"更换镜像\",\"可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\",\"sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://qnmufcit.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker\"]},\"5\":{\"h\":\"常见命令\"},\"6\":{\"h\":\"基本操作\",\"t\":[\"查看 Docker 版本\",\"docker --version\",\"查看 Docker 系统信息\",\"docker info\",\"列出所有 Docker 命令\",\"docker --help\"]},\"7\":{\"h\":\"镜像管理\",\"t\":[\"搜索镜像\",\"docker search [镜像名]\",\"拉取镜像\",\"docker pull [镜像名]:[标签]\",\"列出本地镜像\",\"docker images\",\"删除本地镜像\",\"docker rmi [镜像ID]\",\"构建镜像\",\"docker build -t [镜像名]:[标签] [Dockerfile路径]\"]},\"8\":{\"h\":\"容器管理\",\"t\":[\"运行容器\",\"docker run [选项] [镜像名] -d //后台运行 -t //分配伪终端 -i //交互模式 -it //交互模式和伪终端 --name container_name //指定容器名称 -p host_port:container_port // 端口映射 -e \\\"ENV_VAR_NAME=value\\\" //环境变量 可覆盖ENV中同名变量 -v /host/path:/container/path 挂载券 -w /path/in/container //设置工作目录 --memory=\\\"1g\\\" //设置工作内存 --cpus=\\\"0.5\\\" 限制cpu数量 --rm //容器停止后自动删除\",\"列出运行中的容器\",\"docker ps\",\"列出所有容器（包括停止的）\",\"docker ps -a\",\"停止容器\",\"docker stop [容器ID]\",\"启动容器\",\"docker start [容器ID]\",\"重启容器\",\"docker restart [容器ID]\",\"删除容器\",\"docker rm [容器ID]\",\"查看容器日志\",\"docker logs [容器ID]\",\"进入容器\",\"docker exec -it [容器ID] /bin/bash\"]},\"9\":{\"h\":\"网络管理\",\"t\":[\"列出网络\",\"docker network ls\",\"创建网络\",\"docker network create [网络名]\",\"删除网络\",\"docker network rm [网络名]\",\"连接容器到网络\",\"docker network connect [网络名] [容器ID]\",\"断开容器与网络的连接\",\"docker network disconnect [网络名] [容器ID]\"]},\"10\":{\"h\":\"卷管理\",\"t\":[\"列出卷\",\"docker volume ls\",\"创建卷\",\"docker volume create [卷名]\",\"删除卷\",\"docker volume rm [卷名]\",\"查看卷详细信息\",\"docker volume inspect [卷名]\"]},\"11\":{\"h\":\"使用Dockerfile构建镜像\"},\"12\":{\"h\":\"流程\",\"t\":[\"创建一个目录\",\"mkdir my-docker-app cd my-docker-app\",\"创建Dockerfile\",\"touch Dockerfile\",\"编写dockerfile\",\"构建镜像\",\"docker build -t my-python-app . -t 指定tag标签 . 表示Dockerfile所在的当前目录\"]},\"13\":{\"h\":\"常用指令\",\"t\":[\"Dockerfile 是用来定义 Docker 镜像构建过程的文件。以下是一些常用的 Dockerfile 指令及其详细解释。\",\"FROM\",\"FROM <image>[:<tag>] # 指定基础镜像，通常是 Dockerfile 的第一条指令。 FROM python:3.9-slim\",\"LABEL\",\"LABEL <key>=<value> ... # 添加元数据到镜像中，例如维护者信息。 LABEL maintainer=\\\"you@example.com\\\"\",\"RUN\",\"RUN <command> [param1 param2 ...] # 在构建镜像时执行的命令。通常用于安装软件包。 RUN apt-get update && apt-get install -y curl\",\"CMD\",\"CMD [\\\"executable\\\",\\\"param1\\\",\\\"param2\\\"] # 指定容器启动时要运行的命令。可以被 docker run 命令行参数覆盖。 CMD [\\\"python\\\", \\\"app.py\\\"]\",\"EXPOSE\",\"EXPOSE <port> [<port>/<protocol>...] # 声明容器运行时监听的端口。 EXPOSE 80\",\"ENV\",\"ENV <key>=<value> ... # 设置环境变量。 ENV DEBUG=true\",\"ADD\",\"ADD <src>... <dest> # 将文件、目录或远程文件 URL 的内容复制到镜像中。 ADD . /app\",\"COPY\",\"COPY <src>... <dest> # 将文件和目录复制到镜像中（与 ADD 类似，但不支持 URL）。 COPY . /app\",\"ENTRYPOINT\",\"ENTRYPOINT [\\\"executable\\\", \\\"param1\\\", \\\"param2\\\"] # 配置容器启动时运行的主命令，不会被 docker run 命令行参数覆盖。 ENTRYPOINT [\\\"python\\\", \\\"app.py\\\"]\",\"VOLUME\",\"VOLUME [\\\"\\\"/path/in/container\\\"\\\"] # 创建挂载点，将主机目录或其他容器目录挂载到容器中。 VOLUME [\\\"/myvol\\\"]\",\"WORKDIR\",\"WORKDIR /path/to/workdir # 设置工作目录，用于 RUN, CMD, ENTRYPOINT, COPY 和 ADD 指令。 WORKDIR /app\",\"USER\",\"USER <username|uid>[:<group|gid>] # 设置执行后续指令的用户和可选的用户组。 USER appuser\",\"ARG\",\"ARG <name>[=<default value>] # 定义在构建时可以传递的变量。 ARG build_version\",\"ONBUILD\",\"ONBUILD <INSTRUCTION> # 设置触发指令，当构建一个继承自这个镜像的镜像时执行。 ONBUILD ADD . /app/src\"]},\"14\":{\"h\":\"例\",\"t\":[\"# 使用官方的 Node.js 镜像作为基础镜像 FROM node:14 # 设置维护者信息 LABEL maintainer=\\\"you@example.com\\\" # 设置环境变量 ENV NODE_ENV=production # 设置工作目录 WORKDIR /usr/src/app # 将 package.json 和 package-lock.json 复制到工作目录 COPY package*.json ./ # 安装应用依赖 RUN npm install # 将应用代码复制到工作目录 COPY . . # 暴露应用运行端口 EXPOSE 8080 # 定义容器启动时运行的命令 CMD [\\\"node\\\", \\\"server.js\\\"]\"]},\"15\":{\"h\":\"将镜像发布到阿里云\",\"t\":[\"访问阿里云容器镜像服务，开通个人实例\",\"创建命名空间和镜像仓库\",\"详见仓库操作示例\"]},\"16\":{\"h\":\"Dubbo相关\",\"t\":[\"Apache Dubbo 是一个易于使用的 Web 和 RPC 框架，为通信、服务发现、流量管理、可观察性、安全、工具以及构建企业级微服务的最佳实践提供了多种语言实现（Java、Go、Rust、Node.js、Web）。\",\"Dubbo不仅是一个高性能的RPC框架，同时也和Spring Cloud一样提供了一套微服务整体解决方案(如服务发现、负载均衡、动态配置等)\",\"Dubbo与Spring Cloud的关系\",\"Dubbo架构\",\"如图所示，Dubbo从抽象架构上分为两层：服务治理抽象控制面 和 Dubbo 数据面 。\",\"服务治理控制面：对 Dubbo 治理体系的抽象表达。包含协调服务发现的注册中心、流量管控策略、Dubbo Admin 控制台等。\",\"Dubbo 数据面：数据面代表集群部署的所有 Dubbo 进程，进程之间通过 RPC 协议实现数据交换，Dubbo 定义了微服务应用开发与调用规范并负责完成数据传输的编解码工作。 \",\"服务消费者 (Dubbo Consumer)，发起业务调用或 RPC 通信的 Dubbo 进程\",\"服务提供者 (Dubbo Provider)，接收业务调用或 RPC 通信的 Dubbo 进程\"]},\"17\":{\"h\":\"引入依赖\",\"t\":[\"使用Dubbo Spring Boot Starter，首先引入以下 Maven 依赖\",\"<!-- 统一定义Dubbo各组件的版本号--> <dependencyManagement> <dependencies> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-bom</artifactId> <version>3.3.0</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement>\",\"然后，在相应模块的 pom 中增加必要的 starter 依赖：\",\" <dependencies> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-spring-boot-starter</artifactId> </dependency> <!-- 使用zk作为注册中心 --> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId> </dependency> <!-- 使用nacos作为注册中心 --> <dependency> <groupId>org.apache.dubbo</groupId> <artifactId>dubbo-nacos-spring-boot-starter</artifactId> </dependency> </dependencies>\",\"如果使用zk作为注册中心，请注意选择合适的版本\"]},\"18\":{\"h\":\"application.yml配置\",\"t\":[\"示例如下：\",\"dubbo: application: name: dubbo-springboot-demo-provider logger: slf4j protocol: name: dubbo #配置采用的RPC协议 port: 50052 registry: address: ddress: nacos://localhost:8848?username=nacos&password=nacos #注册中心地址 # address: zookeeper://localhost:2181 使用zk\",\"查看全部可用配置参数\",\"service、reference 组件也可以通过 id 与 application 中的全局组件做关联，以下面配置为例。如果要扩展 service 或 reference 的注解配置，则需要增加 dubbo.properties 配置文件或使用其他非注解如 Java Config 方式。\",\"dubbo: application: name: dubbo-springboot-demo-provider protocol: name: tri port: -1 registry: id: zk-registry address: zookeeper://127.0.0.1:2181\",\"通过注解将 service 关联到上文定义的特定注册中心（通过id关联）\",\"@DubboService(registry=\\\"zk-registry\\\") public class DemoServiceImpl implements DemoService {}\",\"通过 Java Config 配置进行关联也是同样道理\",\"@Configuration public class ProviderConfiguration { @Bean public ServiceConfig demoService() { ServiceConfig service = new ServiceConfig(); service.setRegistry(\\\"zk-registry\\\"); return service; } }\"]},\"19\":{\"h\":\"注解使用\",\"t\":[\"@DubboService、@DubboReference 与 EnableDubbo 注解。其中 @DubboService 与 @DubboReference 用于标记 Dubbo 服务，EnableDubbo 启动 Dubbo 相关配置并指定 Spring Boot 扫描包路径。\"]},\"20\":{\"h\":\"@DubboService 注解\",\"t\":[\"@Service 注解从 3.0 版本开始就已经废弃，改用 @DubboService，以区别于 Spring 的 @Service 注解\",\"定义好 Dubbo 服务接口后，提供服务接口的实现逻辑，并用 @DubboService 注解标记，就可以实现 Dubbo 的服务暴露\",\"@DubboService public class DemoServiceImpl implements DemoService {}\",\"如果要设置服务参数，@DubboService 也提供了常用参数的设置方式。如果有更复杂的参数设置需求，则可以考虑使用其他设置方式\",\"@DubboService(version = \\\"1.0.0\\\", group = \\\"dev\\\", timeout = 5000) public class DemoServiceImpl implements DemoService {}\"]},\"21\":{\"h\":\"@DubboReference 注解\",\"t\":[\"@Reference 注解从 3.0 版本开始就已经废弃，改用 @DubboReference，以区别于 Spring 的 @Reference 注解\",\"@Component public class DemoClient { @DubboReference private DemoService demoService; }\",\"@DubboReference 注解将自动注入为 Dubbo 服务代理实例，使用 demoService 即可发起远程服务调用\"]},\"22\":{\"h\":\"@EnableDubbo 注解\",\"t\":[\"@EnableDubbo 注解必须配置，否则将无法加载 Dubbo 注解定义的服务，@EnableDubbo 可以定义在主类上\",\"@SpringBootApplication @EnableDubbo public class ProviderApplication { public static void main(String[] args) throws Exception { SpringApplication.run(ProviderApplication.class, args); } }\",\"Spring Boot 注解默认只会扫描 main 类所在的 package，如果服务定义在其它 package 中，需要增加配置 EnableDubbo(scanBasePackages = {\\\"org.apache.dubbo.springboot.demo.provider\\\"})\"]},\"23\":{\"h\":\"扩展注解配置\",\"t\":[\"虽然可以通过 @DubboService 和 DubboReference 调整配置参数（如下代码片段所示），但总体来说注解是为易用性设计的，其提供的仅仅是 80% 场景下常用的配置项。在这种情况下，如果有更复杂的参数设置需求，可以使用 Java Config 或 dubbo.properties 两种方式。\",\"@DubboService(version = \\\"1.0.0\\\", group = \\\"dev\\\", timeout = 5000) @DubboReference(version = \\\"1.0.0\\\", group = \\\"dev\\\", timeout = 5000)\"]},\"24\":{\"h\":\"使用 Java Config 代替注解\",\"t\":[\"注意，Java Config 是 DubboService 或 DubboReference 的替代方式，对于有复杂配置需求的服务建议使用这种方式。\",\"@Configuration public class ProviderConfiguration { @Bean public ServiceBean demoService() { ServiceBean service = new ServiceBean(); service.setInterface(DemoService.class); service.setRef(new DemoServiceImpl()); service.setGroup(\\\"dev\\\"); service.setVersion(\\\"1.0.0\\\"); Map<String, String> parameters = new HashMap<>(); service.setParameters(parameters); return service; } }\"]},\"25\":{\"h\":\"git相关\"},\"26\":{\"h\":\"安装\",\"t\":[\"https://git-scm.com/downloads\"]},\"27\":{\"h\":\"初始化与设置远程\",\"t\":[\"初始化仓库：\",\"git init\",\"添加远程仓库：\",\"git remote add origin https://github.com/winkik/foo.git\",\"将工作区的修改添加到暂存区\",\"git add .\",\"将暂存区中的修改提交到版本库：\",\"git commit -m \\\"Initial commit\\\"\",\"将当前分支重命名为main\",\"git branch -M main\",\"将代码推送到远程main分支并与当前分支绑定\",\"git push -u origin main\"]},\"28\":{\"h\":\"提交规范\"},\"29\":{\"h\":\"commit message格式\",\"t\":[\" <type>(<scope>): <subject> 例：feat(miniprogram): 增加了小程序模板消息相关功能\",\"scope : commit作用范围 subject : 描述 type : 提交类型，分类如下：\",\"feat - 新功能 feature\",\"fix - 修复 bug\",\"docs - 文档注释\",\"style - 代码格式(不影响代码运行的变动)\",\"refactor - 重构、优化(既不增加新功能，也不是修复bug)\",\"perf - 性能优化\",\"test - 增加测试\",\"chore - 构建过程或辅助工具的变动\",\"revert - 回退\",\"build - 打包\"]},\"30\":{\"h\":\"分支管理\",\"t\":[\"创建分支\",\"git branch dev\",\"切换到指定分支\",\"git checkout dev or git switch dev\",\"以上两步可以合并为：\",\" git checkout -b dev\",\"查看当前分支：\",\"git branch * dev #'*' 标记当前所在分支 master\",\"合并指定分支到当前分支上：\",\"git merge dev #将dev分支合并到master分支\",\"删除分支：\",\"git branch -d dev\"]},\"31\":{\"h\":\"java使用jSerialComm进行串口通信\"},\"32\":{\"h\":\"引入依赖\",\"t\":[\" <dependency> <groupId>com.fazecast</groupId> <artifactId>jSerialComm</artifactId> <version>2.9.2</version> </dependency>\"]},\"33\":{\"h\":\"编写配置类\",\"t\":[\"@Configuration public class SerialConfig { @Bean public SerialPort serialPort(){ SerialPort serialPort = SerialPort.getCommPort(\\\"COM2\\\"); // 配置波特率，数据位，停止位和校验位 serialPort.setBaudRate(9600); serialPort.setNumDataBits(8); //serialPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING,1000,1000); serialPort.setNumStopBits(SerialPort.ONE_STOP_BIT); serialPort.setParity(SerialPort.NO_PARITY); return serialPort; } }\"]},\"34\":{\"h\":\"编写相关功能\",\"t\":[\"@Component public class SerialService { @Resource private SerialPort serialPort; // 打开串口 public boolean openPort() { boolean result = false; if(!serialPort.isOpen()){ result = serialPort.openPort(); } return result; } // 关闭串口 public void closePort() { serialPort.closePort(); } // 发送数据 public void sendData(String data) { // serialPort.flushIOBuffers(); if (serialPort.isOpen()) { serialPort.flushIOBuffers(); //清除缓冲区 byte[] buffer = data.getBytes(); serialPort.writeBytes(buffer, buffer.length); } else { throw new IllegalStateException(\\\"Serial port is not open\\\"); } } // 接收数据 public String receiveData() { if (serialPort.isOpen()) { serialPort.flushIOBuffers(); StringBuilder dataBuffer = new StringBuilder(); // 缓存数据 try { while (true) { // 读取单字节数据 byte[] readBuffer = new byte[1]; int numRead = serialPort.readBytes(readBuffer, readBuffer.length); if (numRead > 0) { char receivedChar = (char) readBuffer[0]; // 转换为字符 if (receivedChar == '*') { // 遇到*，结束读取 //这里*为自定义的每行语句的结束符 String res = dataBuffer.toString(); System.out.println(\\\"收到完整数据：\\\" + res); dataBuffer.setLength(0); // 清空缓冲区 return res; } else { dataBuffer.append(receivedChar); // 添加到缓冲区 } } } } catch (Exception e) { throw new RuntimeException(e); } } else { throw new IllegalStateException(\\\"Serial port is not open\\\"); } } /** * 发送和接收数据 */ public synchronized String sendAndRecvSync(String data){ closePort(); openPort(); sendData(data); String res = receiveData(); return res; } }\"]},\"35\":{\"h\":\"Java日志框架\",\"t\":[\"当前Java日志主要结构为日志门面+日志实现，基于门面基本可分为两大阵营：Commons Logging阵营和Slf4j阵营。\"]},\"36\":{\"h\":\"门面模式\",\"t\":[\"定义：\",\"门面模式（Facade），为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\",\"图例：\",\"门面模式示例\",\"Facade为门面对象，主要特征为：\",\"了解所有子系统的功能和责任\",\"将Client发来的请求委派到子系统中\",\"自身没有业务逻辑也不参与子系统内部的业务逻辑实现\",\"即客户端只需与门面类Facade交互，而不需要知道子系统中的功能。\"]},\"37\":{\"h\":\"日志门面\",\"t\":[\"提供统一的日志输出接口(Facade)\",\"SLF4j（Simple Logging Facade For Java）：一个为 Java 程序提供的统一日志输出接口，就是一个接口，\",\"Commons Logging（Jaka Commons Logging, Apache Commons Logging）：Apache 提供的一个日志门面，提供统一的对外接口。\"]},\"38\":{\"h\":\"日志实现\",\"t\":[\"具体实现日志输出的逻辑(Client)\",\"JUL（Java util Logging）：Java 原生的日志框架，使用时不需要引用第三方类库，使用方便。\",\"7 个日志级别（从高到低）：SEVERE、WARNING、INFO、CONFIG、FINE、FINER、FINEST。\",\"同时还有 OFF、ALL 两个特别的日志级别，用来 关闭/打开 所有的日志。\",\"log4j：Apache 的一个开源项目。\",\"7 个日志级别（从高到低）：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL。\",\"日志级别\",\"日志介绍\",\"OFF\",\"最高日志级别，关闭所有日志\",\"FATAL\",\"将会导致引用程序退出的错误\",\"ERROR\",\"发生错误事件，但仍不影响系统的继续运行\",\"WARN\",\"警告，存在潜在的错误\",\"INFO\",\"一般用在粗粒度级别上，强调应用程序的运行全程\",\"DEBUG\",\"一般用在细粒度级别上，用于调试应用程序\",\"ALL\",\"最低日志级别，打开所有日志\",\"log4j2：log4j 的升级版，参考了 logback 的设计，同时进行了问题修复。\",\"异常优化：提供了一些异常处理机制，来解决在 logback 中，应用无法感知到 Appener 异常。\",\"性能提升：相较于 log4j 和 logback，性能都有明显的提升。\",\"自动重载配置：参考 logback 的参数修改自动更新机制，提供自动刷新参数的设置。\",\"无垃圾机制：可以使用其设计的一套无垃圾机制（对象重用、内存缓冲），避免频繁的日志记录导致 JVM gc 压力过大。\",\"logback：SpringBoot 默认的日志框架。\",\"由三个模块组成：\",\"logback-core：logback 核心包，开发人员可以以次为基础搭建自身模块。\",\"logback-classic：logback 对于 SLF4j 的实现，其中依赖了 logback-core 包。\",\"logback-access：集成 Servlet 容器，实现 HTTP 访问日志的功能。\",\"可以输出日志到文件、数据库、控制台中，还可以将日志文件进行压缩，功能很丰富。\",\"日志级别（从高到低）：FATAL、ERROR、WARNING、INFO、DEBUG、TRACE。\",\"日志级别\",\"日志介绍\",\"TRACE\",\"在线调试，默认不输出到控制台和文件\",\"DEBUG\",\"在线调试、终端查看，默认输出到控制台，用于开发者查看日志流水\",\"INFO\",\"报告程序进度、查看程序状态，用于跟踪程序进展\",\"WARNING\",\"警告，程序出现错误，但是程序可以恢复，程序仍是正常状态\",\"ERROR\",\"错误，程序发生错误后还可以运行，但是程序极有可能处于非正常状态，功能可能无法全部完成\",\"FATAL\",\"致命错误，程序必须马上终止\"]},\"39\":{\"h\":\"使用\",\"t\":[\"引入依赖\",\" <!-- 日志门面 --> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.7.25</version> </dependency> <!-- 日志实现 --> <!-- 按需导入一个即可 --> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.3</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> <version>1.7.25</version> </dependency> <!--log4j并不直接实现slf4j，但是有专门的一层桥接slf4j-log4j12来实现slf4j --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>1.7.21</version> </dependency>\",\"代码使用\",\"public void testSlf4j() { Logger logger = LoggerFactory.getLogger(Object.class); logger.error(\\\"123\\\"); }\",\"使用Lombok的@Slf4j注解 Spring中使用lombok仍需引入日志门面\",\" <!--引入Lombok依赖 --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.36</version> </dependency>\",\"@Slf4j public void testSlf4j() { log.error(\\\"123\\\"); }\",\"注意：\",\"Spring-boot-starter中已存在日志实现相关依赖，无需再手动引入\",\"若要使用@Slf4j注解，需要确保idea中已安装Lombok插件\",\"参考\",\"https://juejin.cn/post/7205192064212074556\",\"https://www.cnblogs.com/xrq730/p/8619156.html\",\"https://www.cnblogs.com/luler/p/15232704.html\",\"https://www.cnblogs.com/luler/p/15272105.html\"]},\"40\":{\"h\":\"kafka\"},\"41\":{\"h\":\"什么是kafka?\",\"t\":[\"kafka是一个开源的分布式流处理平台，用于构建可扩展、高吞吐、低延迟的应用程序,由通过高性能TCP网络协议进行通信的服务器和客户端组成。\",\"kafka集成了三大核心功能：\",\"发布（写入）和订阅（读取）事件流，包括从其他系统持续导入/导出数据；\",\"按需持久化、可靠地存储事件流；\",\"实时或回溯处理事件流。\"]},\"42\":{\"h\":\"核心概念\"},\"43\":{\"h\":\"事件\",\"t\":[\"即消息，它代表一个kafka集群中数据的最小单元，被组织并持久存储在主题中，包括以下属性：\",\"键（Key）：可选字段，用于分区路由（相同键的事件会被分配到同一分区）。\",\"值（Value）：事件的主体内容（如 JSON、二进制数据等）。\",\"时间戳（Timestamp）：事件的生成时间（由生产者定义或 Kafka 自动生成）。\",\"头信息（Headers）：可附加的元数据（如跟踪 ID、版本号等），用于辅助处理。\"]},\"44\":{\"h\":\"Topic - 主题\",\"t\":[\"kafka集群中数据的容器，它代表一个逻辑的流，可以包含多个partition。\"]},\"45\":{\"h\":\"Partition - 分区\",\"t\":[\"kafka集群中数据的物理容器，它代表一个逻辑的流，可以包含多个消息。\",\"Kafka 通过分区来实现数据冗余和伸缩性。\",\"消息以追加的方式写入分区，然后以先入先出的顺序读取。\",\"无法在整个topic范围内保证消息的顺序，但可以保证消息在单个分区内的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。 \"]},\"46\":{\"h\":\"Producer - 生产者\",\"t\":[\"用于创建消息，并将消息发布到kafka的topic中,broker接收到生产者发送的消息后，会将该消息写入对应topic的分区中。\",\"默认情况下通过轮询把消息均衡地分布到topic的所有分区上。\",\"生产者可将消息直接写到指定的分区，通常可以通过消息键和分区器来实现。分区器为键生成一个散列值，并将其映射到指定的分区上。这样可以保证包含同一个键的消息会被写到同一个分区上。\"]},\"47\":{\"h\":\"Consumer - 消费者\",\"t\":[\"用于消费消息，消费者订阅一个或多个主题，并按照消息生成的顺序读取它们。\",\"消费者通过检查消息的偏移量来区分已经读取过的消息。在创建消息时，Kafka会把偏移量添加到消息里。在给定的分区中，每个消息的偏移量都是唯一的。消费者把每个分区最后读取的消息偏移量保存在Zookeeper 或Kafka 上，如果消费者关闭或重启，它的读取状态不会丢失。\",\"消费者是消费组的一部分。群组保证每个分区只能被一个消费者使用。如果一个消费者失效，消费组里的其他消费者可以接管失效消费者的工作，再平衡，分区重新分配。 \"]},\"48\":{\"h\":\"Broker\",\"t\":[\"一个独立的Kafka 服务器被称为broker,broker 为消费者提供服务，对读取分区的请求作出响应，返回已经提交到磁盘上的消息。 \"]},\"49\":{\"h\":\"Replicas - 副本\",\"t\":[\"分区的备份，保存 在broker 上，每个broker 可以保存成百上千个属于不同主题和分区的副本，共有两种类型：\",\"leader：所有生产者请求和消费者请求都会经过这个副本.\",\"follower：不处理来自客户端的请求，它们唯一的任务就是从首领那里复制消息，保持与首领一致的状态。如果首领发生崩溃，其中的一个跟随者会被提升为新首领\"]},\"50\":{\"h\":\"docker部署kafka\",\"t\":[\"拉取镜像\",\"docker pull wurstmeister/kafka docker pull wurstmeister/zookeeper\",\"启动Zookeeper\",\"docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper\",\"启动Kafka\",\"docker run -d --name kafka \\\\ -p 9092:9092 \\\\ -e KAFKA_BROKER_ID=0 \\\\ -e KAFKA_ZOOKEEPER_CONNECT=换成你的服务器IP:2181 \\\\ -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://换成你的服务器IP:9092 \\\\ -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 wurstmeister/kafka\",\"开放服务端口\",\"firewall-cmd --zone=public --add-port=2181/tcp --permanent firewall-cmd --zone=public --add-port=9092/tcp --permanent firewall-cmd --reload\",\"不行的话需要检查服务器控制台是否已开放对应端口\",\"进入kafka控制台\",\"docker exec -it [容器ID] /bin/bash\",\"创建主题\",\"bin/kafka-topics.sh --create --zookeeper 你的zookeeper所在服务器ip:2181 --replication-factor 1 --partitions 1 --topic topic名称\",\"--replication-factor 1 # 副本因子，每个分区只有一个副本 --partitions 1 # 分区数量，只有一个分区\",\"bin/kafka-topics.sh --list --zookeeper zk所在服务器ip:2181 # 查看主题\",\"发送消息\",\"bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Hello-Kafka\",\"接收消息\",\"bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic Hello-Kafka --from-beginning\"]},\"51\":{\"h\":\"Spring Boot集成kafka\",\"t\":[\"添加依赖\",\"<dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka</artifactId> </dependency>\",\"application.yml 配置 kafka\",\"spring: kafka: bootstrap-servers: 服务器ip:9092 producer: # 发生错误后，消息重发的次数。 retries: 1 #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。 batch-size: 16384 # 设置生产者内存缓冲区的大小。 buffer-memory: 33554432 # 键的序列化方式 key-serializer: org.apache.kafka.common.serialization.StringSerializer # 值的序列化方式 value-serializer: org.apache.kafka.common.serialization.StringSerializer # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。 # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。 # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。 acks: 1 consumer: # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D auto-commit-interval: 1S # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理： # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录） # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录 auto-offset-reset: earliest # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量 enable-auto-commit: false # 键的反序列化方式 key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 值的反序列化方式 value-deserializer: org.apache.kafka.common.serialization.StringDeserializer listener: # 在侦听器容器中运行的线程数。 concurrency: 5 #listner负责ack，每调用一次，就立即commit ack-mode: manual_immediate missing-topics-fatal: false\",\"创建消息生产者\",\"@Component public class KafkaProducer { private Logger logger = LoggerFactory.getLogger(KafkaProducer.class); @Resource private KafkaTemplate<String, Object> kafkaTemplate; public static final String TOPIC_TEST = \\\"Hello-Kafka\\\"; public static final String TOPIC_GROUP = \\\"test-consumer-group\\\"; public void send(Object obj) { String obj2String = JSON.toJSONString(obj); logger.info(\\\"准备发送消息为：{}\\\", obj2String); // 发送消息 ListenableFuture<SendResult<String, Object>> future = kafkaTemplate.send(TOPIC_TEST, obj); future.addCallback(new ListenableFutureCallback<SendResult<String, Object>>() { @Override public void onFailure(Throwable throwable) { //发送失败的处理 logger.info(TOPIC_TEST + \\\" - 生产者 发送消息失败：\\\" + throwable.getMessage()); } @Override public void onSuccess(SendResult<String, Object> stringObjectSendResult) { //成功的处理 logger.info(TOPIC_TEST + \\\" - 生产者 发送消息成功：\\\" + stringObjectSendResult.toString()); } }); } }\",\"创建消息消费者\",\"@Component public class KafkaConsumer { private Logger logger = LoggerFactory.getLogger(KafkaConsumer.class); @KafkaListener(topics = KafkaProducer.TOPIC_TEST, groupId = KafkaProducer.TOPIC_GROUP) public void topicTest(ConsumerRecord<?, ?> record, Acknowledgment ack, @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) { Optional<?> message = Optional.ofNullable(record.value()); if (message.isPresent()) { Object msg = message.get(); logger.info(\\\"topic_test 消费了： Topic:\\\" + topic + \\\",Message:\\\" + msg); ack.acknowledge(); } } }\",\"参考：\",\"https://www.51cto.com/article/756995.html\"]},\"52\":{\"h\":\"Lambda表达式与函数式接口\"},\"53\":{\"h\":\"Lambda表达式\"},\"54\":{\"h\":\"定义\",\"t\":[\"Lambda是一个匿名函数，它允许将函数作为方法的参数传递\",\"结构如下：\",\"(parameters) -> {statements} // 参数列表 lambda体\",\"若parameters 只有一个参数，则()为可选地。\",\"若statements只包含一个语句，则{}为可选的，同时不必显式返回\",\"Lambda的参数类型及返回值类型可以自动推断\"]},\"55\":{\"h\":\"方法引用\",\"t\":[\"方法引用是一种更简洁的Lambda表达式，它允许直接访问类或实例已经存在的方法或构造方法\",\"结构如下：\",\"类名/实例名 :: 方法名\",\"构造函数语法格式：\",\"类名 ::new\",\"例：\",\"Function<String, Integer> stringToInteger = (String s) -> Integer.parseInt(s) = Integer::parseInt;\",\"注意：\",\"Lambda体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的函数列表和返回值类型保存一致\",\"若Lambda参数列表中的第一个参数是实例方法的调用者，而第二个参数是实例方法的参数时，可以使用ClassName::method\"]},\"56\":{\"h\":\"函数式接口\"},\"57\":{\"h\":\"定义\",\"t\":[\"有且仅有一个抽象方法的接口被称为函数式接口（不包括static、default以及Object类所有的方法），可以使用lambda表达式创建一个函数式接口的对象。\",\"语法格式：\",\"@FunctionalInterface 修饰符 interface 接口名称 { 返回值类型 方法名称(可选参数信息); // 其他非抽象方法内容 }\"]},\"58\":{\"h\":\"@FunctionalInterface注解\",\"t\":[\"Java8中专门为函数式接口提供的注解，当该注解作用于一个接口时，编译器会强制检查该接口是否有且仅有一个抽象方法，否则会报错，非必须。\"]},\"59\":{\"h\":\"常用函数式接口\"},\"60\":{\"h\":\": 消费型接口\",\"t\":[\"抽象方法： void accept(T t), 接收一个参数进行消费，但无需返回结果\",\"例：\",\" Consumer consumer = System.out::println; consumer.accept(\\\"hello function\\\"); // System.out::println 即为accept()方法的具体实现\",\"默认方法 ：public Consumer<T> andThen(@NotNull Consumer<? super T> after )\",\"例\",\"consumer1.andThen(consumer2).accept() //andThen()和accept的顺序不能颠倒。\",\"执行顺序：先执行consumer1的accept()方法，接着执行andThen()中consumer2的accept()方法\"]},\"61\":{\"h\":\": 供给型接口\",\"t\":[\"抽象方法 ：T get(),无参有返回值\",\"例：\",\" Supplier<String> supplier = () -> \\\"test\\\"; System.out.println(supplier.get()); //test\"]},\"62\":{\"h\":\":函数型接口\",\"t\":[\"抽象方法 : R apply(T t),传入一个参数并返回结果\",\"例：\",\" Function<Integer, Integer> function1 = e -> e * 6; System.out.println(function1.apply(2));//12\",\"默认方法：\",\"public <V> Function<V, R> compose( @NotNull Function<? super V, ? extends T> before )\",\"例：\",\"function1.compose(function2).apply(param1)\",\"执行顺序：\",\"先执行function2的apply(param1)方法，得到param2,接着执行function1中的apply(param2)\"]},\"63\":{\"h\":\":断言型接口\",\"t\":[\"抽象方法 ：boolean test(T t) ,传入一个参数返回布尔值\",\"例：\",\" Predicate<Integer> predicate = t -> t > 0; boolean test = predicate.test(1);//true\",\"默认方法：\",\"public Predicate<T> and( @NotNull Predicate<? super T> other ) 相当于&&\",\"public Predicate<T> or( @NotNull Predicate<? super T> other ) 相当于||\",\"public Predicate<T> negate() 相当于 !(取反)\"]},\"64\":{\"h\":\"Lombok实现原理\",\"t\":[\"转自 https://www.cnblogs.com/jing99/p/13785684.html\",\"Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。但是自动生成的代码到底是如何产生的呢？\",\"核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。\"]},\"65\":{\"h\":\"运行时解析：\",\"t\":[\"运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang.reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。\"]},\"66\":{\"h\":\"编译时解析\",\"t\":[\"编译时解析有两种机制，分别简单描述下：\",\"Annotation Processing Tool：apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：api都在com.sun.mirror非标准包下；没有集成到javac中，需要额外运行。\",\"Pluggable Annotation Processing API：**JSR 269**自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：\",\"img\",\"Lombok本质上就是一个实现了JSR 269 API的程序。在使用javac的过程中，它产生作用的具体流程如下：\",\"javac对源代码进行分析，生成了一棵抽象语法树（AST）\",\"运行过程中调用实现了JSR 269 API的Lombok程序\",\"此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点\",\"javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）\",\"拜读了Lombok源码，对应注解的实现都在HandleXXX中，比如@Getter注解的实现是HandleGetter.handle()。还有一些其它类库使用这种方式实现，比如Google Auto、Dagger等等。\"]},\"67\":{\"h\":\"springboot整合mybatis\"},\"68\":{\"h\":\"引入依赖\",\"t\":[\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jdbc</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>3.0.3</version> </dependency> <!-- MySQL Connector --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.33</version> </dependency>\"]},\"69\":{\"h\":\"添加数据库配置信息\",\"t\":[\"spring: datasource: url: jdbc:mysql://101.35.217.89:3306/air_fryer?useUnicode=true&characterEncoding=utf-8&useSSL=true username: root password: xxxx driver-class-name: com.mysql.cj.jdbc.Driver\"]},\"70\":{\"h\":\"mybatis相关配置\",\"t\":[\"在 resources/目录下创建mybatis文件夹,包含config和mapper两个子文件夹： 结构如下：\",\"resources │--application.yml │ └─mybatis ├─config │ mybatis-config.xml //mybatis配置文件，或者在yml中配置 │ └─mapper //mapper文件存放地址 Env_Mapper.xml\",\"在application.yml中填加相关配置信息：\",\"mybatis: mapper-locations: classpath:/mybatis/mapper/*.xml config-location: classpath:/mybatis/config/mybatis-config.xml\",\"常用配置： config.xml配置文件形式：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- 开启驼峰转换 --> <settings> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> </settings> <!-- 配置别名 --> <typeAliases> <package name=\\\"com.example.entity\\\"/> </typeAliases> </configuration>\",\"yml配置文件形式：\",\"mybatis: type-aliases-package: com.example.entity configuration: map-underscore-to-camel-case: true\",\"配置扫描mapper接口类\",\"在启动类上加入@MapperScan(\\\"接口路径\\\")\",\"在每个接口类中加入@Mapper()注解\",\"编写xml文件\",\"namespace指向对应的接口类的路径\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.winkky.cloud.airfryer.dao.IEnvDao\\\"></mapper>\"]},\"71\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"72\":{\"h\":\"Rust\"},\"73\":{\"h\":\"Backend\"},\"74\":{\"h\":\"Posts\"},\"75\":{\"h\":\"Java\"}},\"dirtCount\":0,\"index\":[[\"404\",{\"1\":{\"71\":1}}],[\"└─mapper\",{\"1\":{\"70\":1}}],[\"└─mybatis\",{\"1\":{\"70\":1}}],[\"├─config\",{\"1\":{\"70\":1}}],[\"│\",{\"1\":{\"70\":4}}],[\"目录下创建mybatis文件夹\",{\"1\":{\"70\":1}}],[\"目录或远程文件\",{\"1\":{\"13\":1}}],[\"还有一些其它类库使用这种方式实现\",{\"1\":{\"66\":1}}],[\"还可以将日志文件进行压缩\",{\"1\":{\"38\":1}}],[\"比如google\",{\"1\":{\"66\":1}}],[\"比如\",{\"1\":{\"66\":1}}],[\"拜读了lombok源码\",{\"1\":{\"66\":1}}],[\"找到\",{\"1\":{\"66\":1}}],[\"生成字节码文件\",{\"1\":{\"66\":1}}],[\"生成了一棵抽象语法树\",{\"1\":{\"66\":1}}],[\"生产者才会收到一个来自服务器的成功响应\",{\"1\":{\"51\":1}}],[\"生产者就会收到一个来自服务器成功响应\",{\"1\":{\"51\":1}}],[\"生产者在成功写入消息之前不会等待任何来自服务器的响应\",{\"1\":{\"51\":1}}],[\"生产者会把它们放在同一个批次里\",{\"1\":{\"51\":1}}],[\"生产者可将消息直接写到指定的分区\",{\"1\":{\"46\":1}}],[\"生产者\",{\"0\":{\"46\":1},\"1\":{\"51\":2}}],[\"作为apt的替代方案\",{\"1\":{\"66\":1}}],[\"没有集成到javac中\",{\"1\":{\"66\":1}}],[\"必须将\",{\"1\":{\"65\":1}}],[\"转自\",{\"1\":{\"64\":1}}],[\"转换为字符\",{\"1\":{\"34\":1}}],[\"取反\",{\"1\":{\"63\":1}}],[\"传入一个参数返回布尔值\",{\"1\":{\"63\":1}}],[\"传入一个参数并返回结果\",{\"1\":{\"62\":1}}],[\"断言型接口\",{\"0\":{\"63\":1}}],[\"断开容器与网络的连接\",{\"1\":{\"9\":1}}],[\"得到param2\",{\"1\":{\"62\":1}}],[\"先执行function2的apply\",{\"1\":{\"62\":1}}],[\"先执行consumer1的accept\",{\"1\":{\"60\":1}}],[\"6\",{\"1\":{\"62\":1}}],[\"函数型接口\",{\"0\":{\"62\":1}}],[\"函数式接口\",{\"0\":{\"56\":1}}],[\"供给型接口\",{\"0\":{\"61\":1}}],[\"执行顺序\",{\"1\":{\"60\":1,\"62\":1}}],[\"抽象方法\",{\"1\":{\"60\":1,\"61\":1,\"62\":1,\"63\":1}}],[\"非必须\",{\"1\":{\"58\":1}}],[\"否则会报错\",{\"1\":{\"58\":1}}],[\"否则将无法加载\",{\"1\":{\"22\":1}}],[\"编译时解析有两种机制\",{\"1\":{\"66\":1}}],[\"编译时解析\",{\"0\":{\"66\":1}}],[\"编译器会强制检查该接口是否有且仅有一个抽象方法\",{\"1\":{\"58\":1}}],[\"编写xml文件\",{\"1\":{\"70\":1}}],[\"编写相关功能\",{\"0\":{\"34\":1}}],[\"编写配置类\",{\"0\":{\"33\":1}}],[\"编写dockerfile\",{\"1\":{\"12\":1}}],[\"返回值类型\",{\"1\":{\"57\":1}}],[\"返回已经提交到磁盘上的消息\",{\"1\":{\"48\":1}}],[\"接口路径\",{\"1\":{\"70\":1}}],[\"接口名称\",{\"1\":{\"57\":1}}],[\"接着执行function1中的apply\",{\"1\":{\"62\":1}}],[\"接着执行andthen\",{\"1\":{\"60\":1}}],[\"接收一个参数进行消费\",{\"1\":{\"60\":1}}],[\"接收消息\",{\"1\":{\"50\":1}}],[\"接收数据\",{\"1\":{\"34\":1}}],[\"接收业务调用或\",{\"1\":{\"16\":1}}],[\"修饰符\",{\"1\":{\"57\":1}}],[\"修复\",{\"1\":{\"29\":1}}],[\"语法格式\",{\"1\":{\"57\":1}}],[\"有且仅有一个抽象方法的接口被称为函数式接口\",{\"1\":{\"57\":1}}],[\"而第二个参数是实例方法的参数时\",{\"1\":{\"55\":1}}],[\"而不需要知道子系统中的功能\",{\"1\":{\"36\":1}}],[\"要与函数式接口中抽象方法的函数列表和返回值类型保存一致\",{\"1\":{\"55\":1}}],[\"构造函数语法格式\",{\"1\":{\"55\":1}}],[\"构建过程或辅助工具的变动\",{\"1\":{\"29\":1}}],[\"构建镜像\",{\"1\":{\"3\":1,\"7\":1,\"12\":1}}],[\"方法\",{\"1\":{\"60\":2,\"62\":1}}],[\"方法的具体实现\",{\"1\":{\"60\":1}}],[\"方法名称\",{\"1\":{\"57\":1}}],[\"方法名\",{\"1\":{\"55\":1}}],[\"方法引用是一种更简洁的lambda表达式\",{\"1\":{\"55\":1}}],[\"方法引用\",{\"0\":{\"55\":1}}],[\"方式\",{\"1\":{\"18\":1}}],[\"若lambda参数列表中的第一个参数是实例方法的调用者\",{\"1\":{\"55\":1}}],[\"若statements只包含一个语句\",{\"1\":{\"54\":1}}],[\"若parameters\",{\"1\":{\"54\":1}}],[\"若要使用\",{\"1\":{\"39\":1}}],[\"参数列表\",{\"1\":{\"54\":1}}],[\"参考\",{\"1\":{\"38\":1,\"39\":1,\"51\":1}}],[\"参考了\",{\"1\":{\"38\":1}}],[\"结构如下\",{\"1\":{\"54\":1,\"55\":1,\"70\":1}}],[\"结束读取\",{\"1\":{\"34\":1}}],[\"成功的处理\",{\"1\":{\"51\":1}}],[\"准备发送消息为\",{\"1\":{\"51\":1}}],[\"每调用一次\",{\"1\":{\"51\":1}}],[\"每个分区只有一个副本\",{\"1\":{\"50\":1}}],[\"每个broker\",{\"1\":{\"49\":1}}],[\"每个消息的偏移量都是唯一的\",{\"1\":{\"47\":1}}],[\"该接口定义了获取注解信息的几个方法\",{\"1\":{\"65\":1}}],[\"该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理\",{\"1\":{\"51\":1}}],[\"该参数指定了一个批次可以使用的内存大小\",{\"1\":{\"51\":1}}],[\"xml配置文件形式\",{\"1\":{\"70\":1}}],[\"xml\",{\"1\":{\"70\":6}}],[\"xxxx\",{\"1\":{\"69\":1}}],[\"x\",{\"1\":{\"51\":1}}],[\"xrq730\",{\"1\":{\"39\":1}}],[\"只需要添加相应的注解\",{\"1\":{\"64\":1}}],[\"只有一个参数\",{\"1\":{\"54\":1}}],[\"只有一个分区\",{\"1\":{\"50\":1}}],[\"只有当所有参与复制的节点全部收到消息时\",{\"1\":{\"51\":1}}],[\"只要集群的首领节点收到消息\",{\"1\":{\"51\":1}}],[\"按照字节数计算\",{\"1\":{\"51\":1}}],[\"按需持久化\",{\"1\":{\"41\":1}}],[\"按需导入一个即可\",{\"1\":{\"39\":1}}],[\"你的zookeeper所在服务器ip\",{\"1\":{\"50\":1}}],[\"换成你的服务器ip\",{\"1\":{\"50\":1}}],[\"保持与首领一致的状态\",{\"1\":{\"49\":1}}],[\"保存\",{\"1\":{\"49\":1}}],[\"所有生产者请求和消费者请求都会经过这个副本\",{\"1\":{\"49\":1}}],[\"所有的日志\",{\"1\":{\"38\":1}}],[\"共有两种类型\",{\"1\":{\"49\":1}}],[\"副本因子\",{\"1\":{\"50\":1}}],[\"副本\",{\"0\":{\"49\":1}}],[\"再平衡\",{\"1\":{\"47\":1}}],[\"群组保证每个分区只能被一个消费者使用\",{\"1\":{\"47\":1}}],[\"上\",{\"1\":{\"47\":1,\"49\":1}}],[\"消息重发的次数\",{\"1\":{\"51\":1}}],[\"消息以追加的方式写入分区\",{\"1\":{\"45\":1}}],[\"消费型接口\",{\"0\":{\"60\":1}}],[\"消费了\",{\"1\":{\"51\":1}}],[\"消费组里的其他消费者可以接管失效消费者的工作\",{\"1\":{\"47\":1}}],[\"消费者将从起始位置读取分区的记录\",{\"1\":{\"51\":1}}],[\"消费者将从最新的记录开始读取数据\",{\"1\":{\"51\":1}}],[\"消费者是消费组的一部分\",{\"1\":{\"47\":1}}],[\"消费者把每个分区最后读取的消息偏移量保存在zookeeper\",{\"1\":{\"47\":1}}],[\"消费者通过检查消息的偏移量来区分已经读取过的消息\",{\"1\":{\"47\":1}}],[\"消费者订阅一个或多个主题\",{\"1\":{\"47\":1}}],[\"消费者\",{\"0\":{\"47\":1}}],[\"会将该消息写入对应topic的分区中\",{\"1\":{\"46\":1}}],[\"并按照消息生成的顺序读取它们\",{\"1\":{\"47\":1}}],[\"并将其映射到指定的分区上\",{\"1\":{\"46\":1}}],[\"并将消息发布到kafka的topic中\",{\"1\":{\"46\":1}}],[\"并用\",{\"1\":{\"20\":1}}],[\"主题\",{\"0\":{\"44\":1}}],[\"主要特征为\",{\"1\":{\"36\":1}}],[\"头信息\",{\"1\":{\"43\":1}}],[\"时间戳\",{\"1\":{\"43\":1}}],[\"二进制数据等\",{\"1\":{\"43\":1}}],[\"值的反序列化方式\",{\"1\":{\"51\":1}}],[\"值的序列化方式\",{\"1\":{\"51\":1}}],[\"值\",{\"1\":{\"43\":1}}],[\"键的反序列化方式\",{\"1\":{\"51\":1}}],[\"键的序列化方式\",{\"1\":{\"51\":1}}],[\"键\",{\"1\":{\"43\":1}}],[\"被组织并持久存储在主题中\",{\"1\":{\"43\":1}}],[\"它产生作用的具体流程如下\",{\"1\":{\"66\":1}}],[\"它解决了apt的两个问题\",{\"1\":{\"66\":1}}],[\"它允许直接访问类或实例已经存在的方法或构造方法\",{\"1\":{\"55\":1}}],[\"它允许将函数作为方法的参数传递\",{\"1\":{\"54\":1}}],[\"它们唯一的任务就是从首领那里复制消息\",{\"1\":{\"49\":1}}],[\"它的读取状态不会丢失\",{\"1\":{\"47\":1}}],[\"它代表一个逻辑的流\",{\"1\":{\"44\":1,\"45\":1}}],[\"它代表一个kafka集群中数据的最小单元\",{\"1\":{\"43\":1}}],[\"它会打印一条确认消息并退出\",{\"1\":{\"4\":1}}],[\"事件的生成时间\",{\"1\":{\"43\":1}}],[\"事件的主体内容\",{\"1\":{\"43\":1}}],[\"事件\",{\"0\":{\"43\":1}}],[\"事件流\",{\"1\":{\"41\":1}}],[\"核心之处就是对于注解的解析上\",{\"1\":{\"64\":1}}],[\"核心概念\",{\"0\":{\"42\":1}}],[\"核心包\",{\"1\":{\"38\":1}}],[\"实例名\",{\"1\":{\"55\":1}}],[\"实时或回溯处理事件流\",{\"1\":{\"41\":1}}],[\"实现\",{\"1\":{\"38\":1}}],[\"导出数据\",{\"1\":{\"41\":1}}],[\"读取\",{\"1\":{\"41\":1}}],[\"读取单字节数据\",{\"1\":{\"34\":1}}],[\"写入\",{\"1\":{\"41\":1}}],[\"由生产者定义或\",{\"1\":{\"43\":1}}],[\"由通过高性能tcp网络协议进行通信的服务器和客户端组成\",{\"1\":{\"41\":1}}],[\"由三个模块组成\",{\"1\":{\"38\":1}}],[\"低延迟的应用程序\",{\"1\":{\"41\":1}}],[\"高吞吐\",{\"1\":{\"41\":1}}],[\"什么是kafka\",{\"0\":{\"41\":1}}],[\"kafkaheaders\",{\"1\":{\"51\":1}}],[\"kafkalistener\",{\"1\":{\"51\":1}}],[\"kafkaconsumer\",{\"1\":{\"51\":2}}],[\"kafkatemplate\",{\"1\":{\"51\":2}}],[\"kafkatemplate<string\",{\"1\":{\"51\":1}}],[\"kafkaproducer\",{\"1\":{\"51\":4}}],[\"kafka<\",{\"1\":{\"51\":2}}],[\"kafka会把偏移量添加到消息里\",{\"1\":{\"47\":1}}],[\"kafka集群中数据的物理容器\",{\"1\":{\"45\":1}}],[\"kafka集群中数据的容器\",{\"1\":{\"44\":1}}],[\"kafka集成了三大核心功能\",{\"1\":{\"41\":1}}],[\"kafka是一个开源的分布式流处理平台\",{\"1\":{\"41\":1}}],[\"kafka\",{\"0\":{\"40\":1},\"1\":{\"43\":1,\"45\":1,\"50\":13,\"51\":7}}],[\"keyrings\",{\"1\":{\"4\":4}}],[\"key\",{\"1\":{\"4\":1,\"43\":1,\"51\":2}}],[\"需要额外运行\",{\"1\":{\"66\":1}}],[\"需要符合特定的格式\",{\"1\":{\"51\":1}}],[\"需要将partition数目设为1\",{\"1\":{\"45\":1}}],[\"需要确保idea中已安装lombok插件\",{\"1\":{\"39\":1}}],[\"需要增加配置\",{\"1\":{\"22\":1}}],[\"无需再为此写任何代码\",{\"1\":{\"64\":1}}],[\"无需再手动引入\",{\"1\":{\"39\":1}}],[\"无参有返回值\",{\"1\":{\"61\":1}}],[\"无法在整个topic范围内保证消息的顺序\",{\"1\":{\"45\":1}}],[\"无垃圾机制\",{\"1\":{\"38\":1}}],[\"引入lombok依赖\",{\"1\":{\"39\":1}}],[\"引入依赖\",{\"0\":{\"17\":1,\"32\":1,\"68\":1},\"1\":{\"39\":1}}],[\"qos\",{\"1\":{\"39\":1}}],[\"qnmufcit\",{\"1\":{\"4\":1}}],[\"致命错误\",{\"1\":{\"38\":1}}],[\"功能可能无法全部完成\",{\"1\":{\"38\":1}}],[\"功能很丰富\",{\"1\":{\"38\":1}}],[\"错误\",{\"1\":{\"38\":1}}],[\"程序必须马上终止\",{\"1\":{\"38\":1}}],[\"程序发生错误后还可以运行\",{\"1\":{\"38\":1}}],[\"程序仍是正常状态\",{\"1\":{\"38\":1}}],[\"程序出现错误\",{\"1\":{\"38\":1}}],[\"程序提供的统一日志输出接口\",{\"1\":{\"37\":1}}],[\"报告程序进度\",{\"1\":{\"38\":1}}],[\"终端查看\",{\"1\":{\"38\":1}}],[\"默认方法\",{\"1\":{\"60\":1,\"62\":1,\"63\":1}}],[\"默认值是true\",{\"1\":{\"51\":1}}],[\"默认值\",{\"1\":{\"51\":1}}],[\"默认情况下通过轮询把消息均衡地分布到topic的所有分区上\",{\"1\":{\"46\":1}}],[\"默认输出到控制台\",{\"1\":{\"38\":1}}],[\"默认不输出到控制台和文件\",{\"1\":{\"38\":1}}],[\"默认的日志框架\",{\"1\":{\"38\":1}}],[\"控制台中\",{\"1\":{\"38\":1}}],[\"控制台等\",{\"1\":{\"16\":1}}],[\"访问日志的功能\",{\"1\":{\"38\":1}}],[\"访问阿里云容器镜像服务\",{\"1\":{\"15\":1}}],[\"集成\",{\"1\":{\"38\":1}}],[\"开启驼峰转换\",{\"1\":{\"70\":1}}],[\"开放服务端口\",{\"1\":{\"50\":1}}],[\"开发人员可以以次为基础搭建自身模块\",{\"1\":{\"38\":1}}],[\"开通个人实例\",{\"1\":{\"15\":1}}],[\"压力过大\",{\"1\":{\"38\":1}}],[\"避免频繁的日志记录导致\",{\"1\":{\"38\":1}}],[\"内存缓冲\",{\"1\":{\"38\":1}}],[\"自jdk6加入\",{\"1\":{\"66\":1}}],[\"自jdk6开始\",{\"1\":{\"66\":1}}],[\"自动提交的时间间隔\",{\"1\":{\"51\":1}}],[\"自动生成\",{\"1\":{\"43\":1}}],[\"自动重载配置\",{\"1\":{\"38\":1}}],[\"自身没有业务逻辑也不参与子系统内部的业务逻辑实现\",{\"1\":{\"36\":1}}],[\"相当于||\",{\"1\":{\"63\":1}}],[\"相当于\",{\"1\":{\"63\":2}}],[\"相同键的事件会被分配到同一分区\",{\"1\":{\"43\":1}}],[\"相较于\",{\"1\":{\"38\":1}}],[\"相关配置并指定\",{\"1\":{\"19\":1}}],[\"性能都有明显的提升\",{\"1\":{\"38\":1}}],[\"性能提升\",{\"1\":{\"38\":1}}],[\"性能优化\",{\"1\":{\"29\":1}}],[\"异常\",{\"1\":{\"38\":1}}],[\"异常优化\",{\"1\":{\"38\":1}}],[\"应用无法感知到\",{\"1\":{\"38\":1}}],[\"来解决在\",{\"1\":{\"38\":1}}],[\"最低日志级别\",{\"1\":{\"38\":1}}],[\"最高日志级别\",{\"1\":{\"38\":1}}],[\"强调应用程序的运行全程\",{\"1\":{\"38\":1}}],[\"一个独立的kafka\",{\"1\":{\"48\":1}}],[\"一个为\",{\"1\":{\"37\":1}}],[\"一般用在细粒度级别上\",{\"1\":{\"38\":1}}],[\"一般用在粗粒度级别上\",{\"1\":{\"38\":1}}],[\"存在潜在的错误\",{\"1\":{\"38\":1}}],[\"警告\",{\"1\":{\"38\":2}}],[\"用来\",{\"1\":{\"38\":1}}],[\"用于消费消息\",{\"1\":{\"47\":1}}],[\"用于创建消息\",{\"1\":{\"46\":1}}],[\"用于辅助处理\",{\"1\":{\"43\":1}}],[\"用于分区路由\",{\"1\":{\"43\":1}}],[\"用于构建可扩展\",{\"1\":{\"41\":1}}],[\"用于跟踪程序进展\",{\"1\":{\"38\":1}}],[\"用于开发者查看日志流水\",{\"1\":{\"38\":1}}],[\"用于调试应用程序\",{\"1\":{\"38\":1}}],[\"用于标记\",{\"1\":{\"19\":1}}],[\"用于\",{\"1\":{\"13\":1}}],[\"两个特别的日志级别\",{\"1\":{\"38\":1}}],[\"两种方式\",{\"1\":{\"23\":1}}],[\"同时不必显式返回\",{\"1\":{\"54\":1}}],[\"同时进行了问题修复\",{\"1\":{\"38\":1}}],[\"同时还有\",{\"1\":{\"38\":1}}],[\"同时也和spring\",{\"1\":{\"16\":1}}],[\"从高到低\",{\"1\":{\"38\":3}}],[\"从仓库拉取镜像\",{\"1\":{\"3\":1}}],[\"个日志级别\",{\"1\":{\"38\":2}}],[\"756995\",{\"1\":{\"51\":1}}],[\"7205192064212074556\",{\"1\":{\"39\":1}}],[\"7\",{\"1\":{\"38\":2,\"39\":3}}],[\"原生的日志框架\",{\"1\":{\"38\":1}}],[\"具体实现日志输出的逻辑\",{\"1\":{\"38\":1}}],[\"日志介绍\",{\"1\":{\"38\":2}}],[\"日志级别\",{\"1\":{\"38\":3}}],[\"日志实现\",{\"0\":{\"38\":1},\"1\":{\"39\":1}}],[\"日志门面\",{\"0\":{\"37\":1},\"1\":{\"39\":1}}],[\"就立即commit\",{\"1\":{\"51\":1}}],[\"就是一个接口\",{\"1\":{\"37\":1}}],[\"就可以实现\",{\"1\":{\"20\":1}}],[\"即给class增加新的节点\",{\"1\":{\"66\":1}}],[\"即为accept\",{\"1\":{\"60\":1}}],[\"即消息\",{\"1\":{\"43\":1}}],[\"即客户端只需与门面类facade交互\",{\"1\":{\"36\":1}}],[\"即可发起远程服务调用\",{\"1\":{\"21\":1}}],[\"了解所有子系统的功能和责任\",{\"1\":{\"36\":1}}],[\"图例\",{\"1\":{\"36\":1}}],[\"这时javac执行的过程如下\",{\"1\":{\"66\":1}}],[\"这样我们就可以对编译器做一些增强\",{\"1\":{\"66\":1}}],[\"这样就可以通过反射拿到该注解\",{\"1\":{\"65\":1}}],[\"这样可以保证包含同一个键的消息会被写到同一个分区上\",{\"1\":{\"46\":1}}],[\"这个接口使得这一子系统更加容易使用\",{\"1\":{\"36\":1}}],[\"这里\",{\"1\":{\"34\":1}}],[\"此时lombok就对第一步骤得到的ast进行处理\",{\"1\":{\"66\":1}}],[\"此模式定义了一个高层接口\",{\"1\":{\"36\":1}}],[\"此命令下载测试映像并在容器中运行\",{\"1\":{\"4\":1}}],[\"门面模式示例\",{\"1\":{\"36\":1}}],[\"门面模式\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"基于门面基本可分为两大阵营\",{\"1\":{\"35\":1}}],[\"基本操作\",{\"0\":{\"6\":1}}],[\"当该注解作用于一个接口时\",{\"1\":{\"58\":1}}],[\"当有多个消息需要被发送到同一个分区时\",{\"1\":{\"51\":1}}],[\"当前java日志主要结构为日志门面+日志实现\",{\"1\":{\"35\":1}}],[\"当构建一个继承自这个镜像的镜像时执行\",{\"1\":{\"13\":1}}],[\"清空缓冲区\",{\"1\":{\"34\":1}}],[\"清除缓冲区\",{\"1\":{\"34\":1}}],[\"+\",{\"1\":{\"34\":1,\"51\":7}}],[\"收到完整数据\",{\"1\":{\"34\":1}}],[\"为可选的\",{\"1\":{\"54\":1}}],[\"为可选地\",{\"1\":{\"54\":1}}],[\"为了避免出现重复数据和数据丢失\",{\"1\":{\"51\":1}}],[\"为消费者提供服务\",{\"1\":{\"48\":1}}],[\"为子系统中的一组接口提供一个一致的界面\",{\"1\":{\"36\":1}}],[\"为自定义的每行语句的结束符\",{\"1\":{\"34\":1}}],[\"为通信\",{\"1\":{\"16\":1}}],[\"遇到\",{\"1\":{\"34\":1}}],[\"缓存数据\",{\"1\":{\"34\":1}}],[\"发生错误后\",{\"1\":{\"51\":1}}],[\"发生错误事件\",{\"1\":{\"38\":1}}],[\"发布\",{\"1\":{\"41\":1}}],[\"发送失败的处理\",{\"1\":{\"51\":1}}],[\"发送消息成功\",{\"1\":{\"51\":1}}],[\"发送消息失败\",{\"1\":{\"51\":1}}],[\"发送消息\",{\"1\":{\"50\":1,\"51\":1}}],[\"发送和接收数据\",{\"1\":{\"34\":1}}],[\"发送数据\",{\"1\":{\"34\":1}}],[\"发起业务调用或\",{\"1\":{\"16\":1}}],[\"关闭所有日志\",{\"1\":{\"38\":1}}],[\"关闭\",{\"1\":{\"38\":1}}],[\"关闭串口\",{\"1\":{\"34\":1}}],[\"关联到上文定义的特定注册中心\",{\"1\":{\"18\":1}}],[\"打开所有日志\",{\"1\":{\"38\":1}}],[\"打开\",{\"1\":{\"38\":1}}],[\"打开串口\",{\"1\":{\"34\":1}}],[\"打包\",{\"1\":{\"29\":1}}],[\"停止位和校验位\",{\"1\":{\"33\":1}}],[\"停止容器\",{\"1\":{\"8\":1}}],[\"数据库\",{\"1\":{\"38\":1}}],[\"数据位\",{\"1\":{\"33\":1}}],[\"数据面代表集群部署的所有\",{\"1\":{\"16\":1}}],[\"数据面\",{\"1\":{\"16\":2}}],[\"269\",{\"1\":{\"66\":3}}],[\"2h\",{\"1\":{\"51\":1}}],[\"217\",{\"1\":{\"69\":1}}],[\"21<\",{\"1\":{\"39\":1}}],[\"2181\",{\"1\":{\"18\":2,\"50\":5}}],[\"2\",{\"1\":{\"39\":2,\"51\":1,\"62\":1}}],[\"25<\",{\"1\":{\"39\":2}}],[\"2<\",{\"1\":{\"32\":1}}],[\"合并指定分支到当前分支上\",{\"1\":{\"30\":1}}],[\"标记当前所在分支\",{\"1\":{\"30\":1}}],[\"标签\",{\"1\":{\"7\":2}}],[\"切换到指定分支\",{\"1\":{\"30\":1}}],[\"回退\",{\"1\":{\"29\":1}}],[\"增加getter和setter方法定义的相应树节点\",{\"1\":{\"66\":1}}],[\"增加测试\",{\"1\":{\"29\":1}}],[\"增加了小程序模板消息相关功能\",{\"1\":{\"29\":1}}],[\"也提供了两种解析方式\",{\"1\":{\"64\":1}}],[\"也提供了常用参数的设置方式\",{\"1\":{\"20\":1}}],[\"也不是修复bug\",{\"1\":{\"29\":1}}],[\"既不增加新功能\",{\"1\":{\"29\":1}}],[\"优化\",{\"1\":{\"29\":1}}],[\"重构\",{\"1\":{\"29\":1}}],[\"重启容器\",{\"1\":{\"8\":1}}],[\"不推荐使用\",{\"1\":{\"66\":1}}],[\"不包括static\",{\"1\":{\"57\":1}}],[\"不行的话需要检查服务器控制台是否已开放对应端口\",{\"1\":{\"50\":1}}],[\"不处理来自客户端的请求\",{\"1\":{\"49\":1}}],[\"不影响代码运行的变动\",{\"1\":{\"29\":1}}],[\"不会被\",{\"1\":{\"13\":1}}],[\"代码块\",{\"1\":{\"66\":1}}],[\"代码使用\",{\"1\":{\"39\":1}}],[\"代码格式\",{\"1\":{\"29\":1}}],[\"代替注解\",{\"0\":{\"24\":1}}],[\"文档注释\",{\"1\":{\"29\":1}}],[\"新功能\",{\"1\":{\"29\":1}}],[\"分别简单描述下\",{\"1\":{\"66\":1}}],[\"分区数量\",{\"1\":{\"50\":1}}],[\"分区的备份\",{\"1\":{\"49\":1}}],[\"分区重新分配\",{\"1\":{\"47\":1}}],[\"分区器为键生成一个散列值\",{\"1\":{\"46\":1}}],[\"分区\",{\"0\":{\"45\":1}}],[\"分支管理\",{\"0\":{\"30\":1}}],[\"分类如下\",{\"1\":{\"29\":1}}],[\"分配伪终端\",{\"1\":{\"8\":1}}],[\"描述\",{\"1\":{\"29\":1}}],[\"提供自动刷新参数的设置\",{\"1\":{\"38\":1}}],[\"提供了一些异常处理机制\",{\"1\":{\"38\":1}}],[\"提供统一的对外接口\",{\"1\":{\"37\":1}}],[\"提供统一的日志输出接口\",{\"1\":{\"37\":1}}],[\"提供的一个日志门面\",{\"1\":{\"37\":1}}],[\"提供服务接口的实现逻辑\",{\"1\":{\"20\":1}}],[\"提交类型\",{\"1\":{\"29\":1}}],[\"提交规范\",{\"0\":{\"28\":1}}],[\"添加数据库配置信息\",{\"0\":{\"69\":1}}],[\"添加依赖\",{\"1\":{\"51\":1}}],[\"添加到缓冲区\",{\"1\":{\"34\":1}}],[\"添加远程仓库\",{\"1\":{\"27\":1}}],[\"添加元数据到镜像中\",{\"1\":{\"13\":1}}],[\"初始化仓库\",{\"1\":{\"27\":1}}],[\"初始化与设置远程\",{\"0\":{\"27\":1}}],[\"场景下常用的配置项\",{\"1\":{\"23\":1}}],[\"其他非抽象方法内容\",{\"1\":{\"57\":1}}],[\"其提供的仅仅是\",{\"1\":{\"23\":1}}],[\"其中的一个跟随者会被提升为新首领\",{\"1\":{\"49\":1}}],[\"其中依赖了\",{\"1\":{\"38\":1}}],[\"其中\",{\"1\":{\"19\":1}}],[\"但无需返回结果\",{\"1\":{\"60\":1}}],[\"但可以保证消息在单个分区内的顺序\",{\"1\":{\"45\":1}}],[\"但是自动生成的代码到底是如何产生的呢\",{\"1\":{\"64\":1}}],[\"但是有专门的一层桥接slf4j\",{\"1\":{\"39\":1}}],[\"但是程序极有可能处于非正常状态\",{\"1\":{\"38\":1}}],[\"但是程序可以恢复\",{\"1\":{\"38\":1}}],[\"但仍不影响系统的继续运行\",{\"1\":{\"38\":1}}],[\"但总体来说注解是为易用性设计的\",{\"1\":{\"23\":1}}],[\"但不支持\",{\"1\":{\"13\":1}}],[\"调整配置参数\",{\"1\":{\"23\":1}}],[\"虽然可以通过\",{\"1\":{\"23\":1}}],[\"扩展注解配置\",{\"0\":{\"23\":1}}],[\"类名\",{\"1\":{\"55\":2}}],[\"类所在的\",{\"1\":{\"22\":1}}],[\"类似\",{\"1\":{\"13\":1}}],[\"则\",{\"1\":{\"54\":2}}],[\"则可以考虑使用其他设置方式\",{\"1\":{\"20\":1}}],[\"则需要增加\",{\"1\":{\"18\":1}}],[\"以上两步可以合并为\",{\"1\":{\"30\":1}}],[\"以区别于\",{\"1\":{\"20\":1,\"21\":1}}],[\"以下面配置为例\",{\"1\":{\"18\":1}}],[\"以下是一些常用的\",{\"1\":{\"13\":1}}],[\"改用\",{\"1\":{\"20\":1,\"21\":1}}],[\"扫描包路径\",{\"1\":{\"19\":1}}],[\"启动kafka\",{\"1\":{\"50\":1}}],[\"启动zookeeper\",{\"1\":{\"50\":1}}],[\"启动\",{\"1\":{\"19\":1}}],[\"启动容器\",{\"1\":{\"8\":1}}],[\"注意\",{\"1\":{\"24\":1,\"39\":1,\"55\":1}}],[\"注解默认只会扫描\",{\"1\":{\"22\":1}}],[\"注解定义的服务\",{\"1\":{\"22\":1}}],[\"注解必须配置\",{\"1\":{\"22\":1}}],[\"注解将自动注入为\",{\"1\":{\"21\":1}}],[\"注解标记\",{\"1\":{\"20\":1}}],[\"注解从\",{\"1\":{\"20\":1,\"21\":1}}],[\"注解\",{\"0\":{\"20\":1,\"21\":1,\"22\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"70\":1}}],[\"注解使用\",{\"0\":{\"19\":1}}],[\"注册中心地址\",{\"1\":{\"18\":1}}],[\"==\",{\"1\":{\"34\":1}}],[\"=\",{\"1\":{\"18\":1,\"20\":3,\"22\":1,\"23\":6,\"24\":2,\"33\":1,\"34\":9,\"39\":1,\"51\":10,\"55\":2,\"60\":1,\"61\":1,\"62\":1,\"63\":2}}],[\"=<default\",{\"1\":{\"13\":1}}],[\"zone=public\",{\"1\":{\"50\":2}}],[\"zookeeper\",{\"1\":{\"17\":1,\"18\":2,\"50\":6}}],[\"zk所在服务器ip\",{\"1\":{\"50\":1}}],[\"zk\",{\"1\":{\"18\":3}}],[\"或者在yml中配置\",{\"1\":{\"70\":1}}],[\"或kafka\",{\"1\":{\"47\":1}}],[\"或\",{\"1\":{\"18\":1,\"23\":1,\"24\":1}}],[\"中consumer2的accept\",{\"1\":{\"60\":1}}],[\"中\",{\"1\":{\"22\":1,\"38\":1}}],[\"中的全局组件做关联\",{\"1\":{\"18\":1}}],[\"中增加必要的\",{\"1\":{\"17\":1}}],[\"组件也可以通过\",{\"1\":{\"18\":1}}],[\"89\",{\"1\":{\"69\":1}}],[\"8619156\",{\"1\":{\"39\":1}}],[\"8\",{\"1\":{\"33\":1,\"69\":1,\"70\":2}}],[\"8848\",{\"1\":{\"18\":1}}],[\"8080\",{\"1\":{\"14\":1}}],[\"80\",{\"1\":{\"13\":1,\"23\":1}}],[\"配置扫描mapper接口类\",{\"1\":{\"70\":1}}],[\"配置别名\",{\"1\":{\"70\":1}}],[\"配置\",{\"1\":{\"51\":1}}],[\"配置波特率\",{\"1\":{\"33\":1}}],[\"配置进行关联也是同样道理\",{\"1\":{\"18\":1}}],[\"配置文件或使用其他非注解如\",{\"1\":{\"18\":1}}],[\"配置采用的rpc协议\",{\"1\":{\"18\":1}}],[\"配置容器启动时运行的主命令\",{\"1\":{\"13\":1}}],[\"示例如下\",{\"1\":{\"18\":1}}],[\"请注意选择合适的版本\",{\"1\":{\"17\":1}}],[\"在每个接口类中加入\",{\"1\":{\"70\":1}}],[\"在启动类上加入\",{\"1\":{\"70\":1}}],[\"在application\",{\"1\":{\"70\":1}}],[\"在\",{\"1\":{\"70\":1}}],[\"在使用javac的过程中\",{\"1\":{\"66\":1}}],[\"在侦听器容器中运行的线程数\",{\"1\":{\"51\":1}}],[\"在消费者启动之后生成的记录\",{\"1\":{\"51\":1}}],[\"在偏移量无效的情况下\",{\"1\":{\"51\":2}}],[\"在spring\",{\"1\":{\"51\":1}}],[\"在broker\",{\"1\":{\"49\":1}}],[\"在给定的分区中\",{\"1\":{\"47\":1}}],[\"在创建消息时\",{\"1\":{\"47\":1}}],[\"在需要严格保证消息的消费顺序的场景下\",{\"1\":{\"45\":1}}],[\"在线调试\",{\"1\":{\"38\":2}}],[\"在这种情况下\",{\"1\":{\"23\":1}}],[\"在相应模块的\",{\"1\":{\"17\":1}}],[\"在构建镜像时执行的命令\",{\"1\":{\"13\":1}}],[\"然后修改该语法树\",{\"1\":{\"66\":1}}],[\"然后手动提交偏移量\",{\"1\":{\"51\":1}}],[\"然后以先入先出的顺序读取\",{\"1\":{\"45\":1}}],[\"然后\",{\"1\":{\"17\":1}}],[\"统一定义dubbo各组件的版本号\",{\"1\":{\"17\":1}}],[\"依赖\",{\"1\":{\"17\":2}}],[\"首先引入以下\",{\"1\":{\"17\":1}}],[\"通过分区来实现数据冗余和伸缩性\",{\"1\":{\"45\":1}}],[\"通过\",{\"1\":{\"18\":1}}],[\"通过id关联\",{\"1\":{\"18\":1}}],[\"通过注解将\",{\"1\":{\"18\":1}}],[\"通信的\",{\"1\":{\"16\":2}}],[\"通常可以通过消息键和分区器来实现\",{\"1\":{\"46\":1}}],[\"通常用于安装软件包\",{\"1\":{\"13\":1}}],[\"通常是\",{\"1\":{\"13\":1}}],[\"协议实现数据交换\",{\"1\":{\"16\":1}}],[\"进入kafka控制台\",{\"1\":{\"50\":1}}],[\"进入容器\",{\"1\":{\"8\":1}}],[\"进程之间通过\",{\"1\":{\"16\":1}}],[\"进程\",{\"1\":{\"16\":3}}],[\"包含config和mapper两个子文件夹\",{\"1\":{\"70\":1}}],[\"包含协调服务发现的注册中心\",{\"1\":{\"16\":1}}],[\"包括以下属性\",{\"1\":{\"43\":1}}],[\"包括从其他系统持续导入\",{\"1\":{\"41\":1}}],[\"包括停止的\",{\"1\":{\"8\":1}}],[\"包\",{\"1\":{\"38\":1}}],[\"治理体系的抽象表达\",{\"1\":{\"16\":1}}],[\"对应注解的实现都在handlexxx中\",{\"1\":{\"66\":1}}],[\"对反射熟悉的朋友应该都会很熟悉这种解析方式\",{\"1\":{\"65\":1}}],[\"对读取分区的请求作出响应\",{\"1\":{\"48\":1}}],[\"对于\",{\"1\":{\"38\":1}}],[\"对于有复杂配置需求的服务建议使用这种方式\",{\"1\":{\"24\":1}}],[\"对象重用\",{\"1\":{\"38\":1}}],[\"对\",{\"1\":{\"16\":1}}],[\"服务器ip\",{\"1\":{\"51\":1}}],[\"服务器被称为broker\",{\"1\":{\"48\":1}}],[\"服务代理实例\",{\"1\":{\"21\":1}}],[\"服务接口后\",{\"1\":{\"20\":1}}],[\"服务\",{\"1\":{\"19\":1}}],[\"服务提供者\",{\"1\":{\"16\":1}}],[\"服务消费者\",{\"1\":{\"16\":1}}],[\"服务治理控制面\",{\"1\":{\"16\":1}}],[\"服务治理抽象控制面\",{\"1\":{\"16\":1}}],[\"服务发现\",{\"1\":{\"16\":1}}],[\"如1s\",{\"1\":{\"51\":1}}],[\"如跟踪\",{\"1\":{\"43\":1}}],[\"如\",{\"1\":{\"43\":1}}],[\"如下代码片段所示\",{\"1\":{\"23\":1}}],[\"如果首领发生崩溃\",{\"1\":{\"49\":1}}],[\"如果一个消费者失效\",{\"1\":{\"47\":1}}],[\"如果消费者关闭或重启\",{\"1\":{\"47\":1}}],[\"如果服务定义在其它\",{\"1\":{\"22\":1}}],[\"如果有更复杂的参数设置需求\",{\"1\":{\"20\":1,\"23\":1}}],[\"如果要设置服务参数\",{\"1\":{\"20\":1}}],[\"如果要扩展\",{\"1\":{\"18\":1}}],[\"如果使用zk作为注册中心\",{\"1\":{\"17\":1}}],[\"如图所示\",{\"1\":{\"16\":1}}],[\"如服务发现\",{\"1\":{\"16\":1}}],[\"动态配置等\",{\"1\":{\"16\":1}}],[\"负载均衡\",{\"1\":{\"16\":1}}],[\"jdbc\",{\"1\":{\"69\":2}}],[\"jdbc<\",{\"1\":{\"68\":1}}],[\"jdk8中已彻底删除\",{\"1\":{\"66\":1}}],[\"jdk7已标记为过期\",{\"1\":{\"66\":1}}],[\"jdk5引入了注解的同时\",{\"1\":{\"64\":1}}],[\"jing99\",{\"1\":{\"64\":1}}],[\"juejin\",{\"1\":{\"39\":1}}],[\"jul\",{\"1\":{\"38\":1}}],[\"jvm\",{\"1\":{\"38\":1}}],[\"jaka\",{\"1\":{\"37\":1}}],[\"java<\",{\"1\":{\"68\":1}}],[\"javac使用修改后的抽象语法树\",{\"1\":{\"66\":1}}],[\"javac对源代码进行分析\",{\"1\":{\"66\":1}}],[\"javac在执行的时候会调用实现了该api的程序\",{\"1\":{\"66\":1}}],[\"java8中专门为函数式接口提供的注解\",{\"1\":{\"58\":1}}],[\"java日志框架\",{\"0\":{\"35\":1}}],[\"java使用jserialcomm进行串口通信\",{\"0\":{\"31\":1}}],[\"java\",{\"0\":{\"24\":1,\"75\":1},\"1\":{\"16\":1,\"18\":2,\"23\":1,\"24\":1,\"37\":2,\"38\":2,\"65\":1}}],[\"jsr\",{\"1\":{\"66\":1}}],[\"js\",{\"1\":{\"14\":2,\"16\":1}}],[\"json\",{\"1\":{\"4\":1,\"14\":3,\"43\":1,\"51\":1}}],[\"json来使用加速器\",{\"1\":{\"4\":1}}],[\"工具以及构建企业级微服务的最佳实践提供了多种语言实现\",{\"1\":{\"16\":1}}],[\"安全\",{\"1\":{\"16\":1}}],[\"安装应用依赖\",{\"1\":{\"14\":1}}],[\"安装docker包\",{\"1\":{\"4\":1}}],[\"安装\",{\"0\":{\"4\":1,\"26\":1}}],[\"流量管控策略\",{\"1\":{\"16\":1}}],[\"流量管理\",{\"1\":{\"16\":1}}],[\"流程\",{\"0\":{\"12\":1}}],[\"框架\",{\"1\":{\"16\":1}}],[\"是否自动提交偏移量\",{\"1\":{\"51\":1}}],[\"是\",{\"1\":{\"24\":1}}],[\"是一个易于使用的\",{\"1\":{\"16\":1}}],[\"是用来定义\",{\"1\":{\"13\":1}}],[\"定义\",{\"0\":{\"54\":1,\"57\":1},\"1\":{\"36\":1}}],[\"定义好\",{\"1\":{\"20\":1}}],[\"定义了微服务应用开发与调用规范并负责完成数据传输的编解码工作\",{\"1\":{\"16\":1}}],[\"定义容器启动时运行的命令\",{\"1\":{\"14\":1}}],[\"定义在构建时可以传递的变量\",{\"1\":{\"13\":1}}],[\"暴露应用运行端口\",{\"1\":{\"14\":1}}],[\"复制到工作目录\",{\"1\":{\"14\":1}}],[\"101\",{\"1\":{\"69\":1}}],[\"1000\",{\"1\":{\"33\":2}}],[\"13785684\",{\"1\":{\"64\":1}}],[\"1s\",{\"1\":{\"51\":1}}],[\"1m\",{\"1\":{\"51\":1}}],[\"16384\",{\"1\":{\"51\":1}}],[\"15272105\",{\"1\":{\"39\":1}}],[\"15232704\",{\"1\":{\"39\":1}}],[\"18\",{\"1\":{\"39\":1}}],[\"12\",{\"1\":{\"62\":1}}],[\"123\",{\"1\":{\"39\":2}}],[\"127\",{\"1\":{\"18\":1}}],[\"17<\",{\"1\":{\"39\":1}}],[\"1\",{\"1\":{\"18\":2,\"20\":1,\"23\":2,\"24\":1,\"34\":1,\"50\":4,\"51\":2,\"63\":1,\"70\":2}}],[\"14\",{\"1\":{\"14\":1}}],[\"1g\",{\"1\":{\"8\":1}}],[\"使用lombok的\",{\"1\":{\"39\":1}}],[\"使用方便\",{\"1\":{\"38\":1}}],[\"使用时不需要引用第三方类库\",{\"1\":{\"38\":1}}],[\"使用\",{\"0\":{\"24\":1,\"39\":1},\"1\":{\"21\":1}}],[\"使用zk\",{\"1\":{\"18\":1}}],[\"使用zk作为注册中心\",{\"1\":{\"17\":1}}],[\"使用nacos作为注册中心\",{\"1\":{\"17\":1}}],[\"使用dubbo\",{\"1\":{\"17\":1}}],[\"使用dockerfile构建镜像\",{\"0\":{\"11\":1}}],[\"使用官方的\",{\"1\":{\"14\":1}}],[\"例\",{\"0\":{\"14\":1},\"1\":{\"29\":1,\"55\":1,\"60\":2,\"61\":1,\"62\":2,\"63\":1}}],[\"例如维护者信息\",{\"1\":{\"13\":1}}],[\"和accept的顺序不能颠倒\",{\"1\":{\"60\":1}}],[\"和订阅\",{\"1\":{\"41\":1}}],[\"和\",{\"1\":{\"13\":1,\"14\":1,\"16\":2,\"23\":1,\"38\":1}}],[\"将会导致引用程序退出的错误\",{\"1\":{\"38\":1}}],[\"将client发来的请求委派到子系统中\",{\"1\":{\"36\":1}}],[\"将dev分支合并到master分支\",{\"1\":{\"30\":1}}],[\"将代码推送到远程main分支并与当前分支绑定\",{\"1\":{\"27\":1}}],[\"将当前分支重命名为main\",{\"1\":{\"27\":1}}],[\"将暂存区中的修改提交到版本库\",{\"1\":{\"27\":1}}],[\"将工作区的修改添加到暂存区\",{\"1\":{\"27\":1}}],[\"将镜像发布到阿里云\",{\"0\":{\"15\":1}}],[\"将应用代码复制到工作目录\",{\"1\":{\"14\":1}}],[\"将\",{\"1\":{\"14\":1}}],[\"将主机目录或其他容器目录挂载到容器中\",{\"1\":{\"13\":1}}],[\"将文件和目录复制到镜像中\",{\"1\":{\"13\":1}}],[\"将文件\",{\"1\":{\"13\":1}}],[\"与\",{\"1\":{\"13\":1,\"18\":1,\"19\":2}}],[\"的实现\",{\"1\":{\"38\":1}}],[\"的参数修改自动更新机制\",{\"1\":{\"38\":1}}],[\"的设计\",{\"1\":{\"38\":1}}],[\"的升级版\",{\"1\":{\"38\":1}}],[\"的一个开源项目\",{\"1\":{\"38\":1}}],[\"的替代方式\",{\"1\":{\"24\":1}}],[\"的服务暴露\",{\"1\":{\"20\":1}}],[\"的\",{\"1\":{\"20\":1,\"21\":1}}],[\"的注解配置\",{\"1\":{\"18\":1}}],[\"的内容复制到镜像中\",{\"1\":{\"13\":1}}],[\"的第一条指令\",{\"1\":{\"13\":1}}],[\"underscore\",{\"1\":{\"70\":1}}],[\"utf\",{\"1\":{\"70\":2}}],[\"util\",{\"1\":{\"38\":1}}],[\"u\",{\"1\":{\"27\":1}}],[\"usessl=true\",{\"1\":{\"69\":1}}],[\"useunicode=true\",{\"1\":{\"69\":1}}],[\"username\",{\"1\":{\"69\":1}}],[\"username=nacos\",{\"1\":{\"18\":1}}],[\"user\",{\"1\":{\"13\":3}}],[\"usr\",{\"1\":{\"14\":1}}],[\"url\",{\"1\":{\"13\":2,\"69\":1}}],[\"update\",{\"1\":{\"4\":2,\"13\":1}}],[\"声明容器运行时监听的端口\",{\"1\":{\"13\":1}}],[\"yml中填加相关配置信息\",{\"1\":{\"70\":1}}],[\"yml\",{\"1\":{\"51\":1,\"70\":1}}],[\"yml配置文件形式\",{\"1\":{\"70\":1}}],[\"yml配置\",{\"0\":{\"18\":1}}],[\"y\",{\"1\":{\"13\":1}}],[\"you\",{\"1\":{\"13\":1,\"14\":1}}],[\"9092\",{\"1\":{\"50\":6,\"51\":1}}],[\"9600\",{\"1\":{\"33\":1}}],[\"9\",{\"1\":{\"13\":1,\"32\":1}}],[\"35\",{\"1\":{\"69\":1}}],[\"3306\",{\"1\":{\"69\":1}}],[\"33<\",{\"1\":{\"68\":1}}],[\"33554432\",{\"1\":{\"51\":1}}],[\"36<\",{\"1\":{\"39\":1}}],[\"3<\",{\"1\":{\"39\":1,\"68\":1}}],[\"3\",{\"1\":{\"13\":1,\"17\":1,\"20\":1,\"21\":1,\"70\":4}}],[\"<mapper\",{\"1\":{\"70\":1}}],[\"<configuration>\",{\"1\":{\"70\":1}}],[\"<command>\",{\"1\":{\"13\":1}}],[\"<v>\",{\"1\":{\"62\":1}}],[\"<version>8\",{\"1\":{\"68\":1}}],[\"<version>1\",{\"1\":{\"39\":6}}],[\"<version>2\",{\"1\":{\"32\":1}}],[\"<version>3\",{\"1\":{\"17\":1,\"68\":1}}],[\"<artifactid>mysql\",{\"1\":{\"68\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"68\":1}}],[\"<artifactid>spring\",{\"1\":{\"51\":1,\"68\":1}}],[\"<artifactid>slf4j\",{\"1\":{\"39\":3}}],[\"<artifactid>lombok<\",{\"1\":{\"39\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"39\":1}}],[\"<artifactid>logback\",{\"1\":{\"39\":1}}],[\"<artifactid>jserialcomm<\",{\"1\":{\"32\":1}}],[\"<artifactid>dubbo\",{\"1\":{\"17\":4}}],[\"<setting\",{\"1\":{\"70\":1}}],[\"<settings>\",{\"1\":{\"70\":1}}],[\"<subject>\",{\"1\":{\"29\":1}}],[\"<scope>\",{\"1\":{\"29\":1}}],[\"<scope>import<\",{\"1\":{\"17\":1}}],[\"<src>\",{\"1\":{\"13\":2}}],[\"<typealiases>\",{\"1\":{\"70\":1}}],[\"<type>\",{\"1\":{\"29\":1}}],[\"<type>pom<\",{\"1\":{\"17\":1}}],[\"<tag>\",{\"1\":{\"13\":1}}],[\"<groupid>mysql<\",{\"1\":{\"68\":1}}],[\"<groupid>log4j<\",{\"1\":{\"39\":1}}],[\"<groupid>ch\",{\"1\":{\"39\":1}}],[\"<groupid>com\",{\"1\":{\"32\":1}}],[\"<groupid>org\",{\"1\":{\"17\":4,\"39\":4,\"51\":1,\"68\":2}}],[\"<group|gid>\",{\"1\":{\"13\":1}}],[\"<dependency>\",{\"1\":{\"17\":4,\"32\":1,\"39\":6,\"51\":1,\"68\":3}}],[\"<dependencymanagement>\",{\"1\":{\"17\":1}}],[\"<dependencies>\",{\"1\":{\"17\":2}}],[\"<dest>\",{\"1\":{\"13\":2}}],[\"<\",{\"1\":{\"17\":10,\"32\":1,\"39\":11,\"51\":1,\"68\":4,\"70\":9}}],[\"<instruction>\",{\"1\":{\"13\":1}}],[\"<image>\",{\"1\":{\"13\":1}}],[\"<name>\",{\"1\":{\"13\":1}}],[\"<username|uid>\",{\"1\":{\"13\":1}}],[\"<package\",{\"1\":{\"70\":1}}],[\"<protocol>\",{\"1\":{\"13\":1}}],[\"<port>\",{\"1\":{\"13\":2}}],[\"<key>=<value>\",{\"1\":{\"13\":2}}],[\"<<\",{\"1\":{\"4\":1}}],[\"指令\",{\"1\":{\"13\":1}}],[\"指令及其详细解释\",{\"1\":{\"13\":1}}],[\"指定容器启动时要运行的命令\",{\"1\":{\"13\":1}}],[\"指定容器名称\",{\"1\":{\"8\":1}}],[\"指定基础镜像\",{\"1\":{\"13\":1}}],[\"指定tag标签\",{\"1\":{\"12\":1}}],[\"常用配置\",{\"1\":{\"70\":1}}],[\"常用函数式接口\",{\"0\":{\"59\":1}}],[\"常用指令\",{\"0\":{\"13\":1}}],[\"常见命令\",{\"0\":{\"5\":1}}],[\"表示dockerfile所在的当前目录\",{\"1\":{\"12\":1}}],[\"卷名\",{\"1\":{\"10\":3}}],[\"卷管理\",{\"0\":{\"10\":1}}],[\"创建消息消费者\",{\"1\":{\"51\":1}}],[\"创建消息生产者\",{\"1\":{\"51\":1}}],[\"创建主题\",{\"1\":{\"50\":1}}],[\"创建分支\",{\"1\":{\"30\":1}}],[\"创建命名空间和镜像仓库\",{\"1\":{\"15\":1}}],[\"创建挂载点\",{\"1\":{\"13\":1}}],[\"创建dockerfile\",{\"1\":{\"12\":1}}],[\"创建一个目录\",{\"1\":{\"12\":1}}],[\"创建卷\",{\"1\":{\"10\":1}}],[\"创建网络\",{\"1\":{\"9\":1}}],[\"连接容器到网络\",{\"1\":{\"9\":1}}],[\"网络名\",{\"1\":{\"9\":4}}],[\"网络管理\",{\"0\":{\"9\":1}}],[\"lang\",{\"1\":{\"65\":1}}],[\"lambda的参数类型及返回值类型可以自动推断\",{\"1\":{\"54\":1}}],[\"lambda体中调用方法的参数列表与返回值类型\",{\"1\":{\"55\":1}}],[\"lambda体\",{\"1\":{\"54\":1}}],[\"lambda是一个匿名函数\",{\"1\":{\"54\":1}}],[\"lambda表达式\",{\"0\":{\"53\":1}}],[\"lambda表达式与函数式接口\",{\"0\":{\"52\":1}}],[\"latest\",{\"1\":{\"51\":1}}],[\"label\",{\"1\":{\"13\":3,\"14\":1}}],[\"leader\",{\"1\":{\"49\":1}}],[\"length\",{\"1\":{\"34\":2}}],[\"luler\",{\"1\":{\"39\":2}}],[\"lombok本质上就是一个实现了jsr\",{\"1\":{\"66\":1}}],[\"lombok使用的过程中\",{\"1\":{\"64\":1}}],[\"lombok实现原理\",{\"0\":{\"64\":1}}],[\"location\",{\"1\":{\"70\":1}}],[\"locations\",{\"1\":{\"70\":1}}],[\"localhost\",{\"1\":{\"18\":2,\"50\":2}}],[\"lock\",{\"1\":{\"14\":1}}],[\"log\",{\"1\":{\"39\":1}}],[\"logback<\",{\"1\":{\"39\":1}}],[\"logback\",{\"1\":{\"38\":11}}],[\"log4j12<\",{\"1\":{\"39\":1}}],[\"log4j12来实现slf4j\",{\"1\":{\"39\":1}}],[\"log4j并不直接实现slf4j\",{\"1\":{\"39\":1}}],[\"log4j2\",{\"1\":{\"38\":1}}],[\"log4j\",{\"1\":{\"38\":3}}],[\"logging\",{\"1\":{\"37\":4,\"38\":1}}],[\"logging阵营和slf4j阵营\",{\"1\":{\"35\":1}}],[\"loggerfactory\",{\"1\":{\"39\":1,\"51\":2}}],[\"logger\",{\"1\":{\"18\":1,\"39\":3,\"51\":8}}],[\"logs\",{\"1\":{\"8\":1}}],[\"ls\",{\"1\":{\"9\":1,\"10\":1}}],[\"listenablefuturecallback<sendresult<string\",{\"1\":{\"51\":1}}],[\"listenablefuture<sendresult<string\",{\"1\":{\"51\":1}}],[\"listener\",{\"1\":{\"51\":1}}],[\"listeners=plaintext\",{\"1\":{\"50\":2}}],[\"listner负责ack\",{\"1\":{\"51\":1}}],[\"list\",{\"1\":{\"4\":2,\"50\":2}}],[\"linux\",{\"1\":{\"4\":2}}],[\"删除分支\",{\"1\":{\"30\":1}}],[\"删除卷\",{\"1\":{\"10\":1}}],[\"删除网络\",{\"1\":{\"9\":1}}],[\"删除容器\",{\"1\":{\"8\":1}}],[\"删除本地镜像\",{\"1\":{\"7\":1}}],[\"限制cpu数量\",{\"1\":{\"8\":1}}],[\"51cto\",{\"1\":{\"51\":1}}],[\"5d\",{\"1\":{\"51\":1}}],[\"5000\",{\"1\":{\"20\":1,\"23\":2}}],[\"50052\",{\"1\":{\"18\":1}}],[\"5\",{\"1\":{\"8\":1,\"51\":1}}],[\"0<\",{\"1\":{\"17\":1}}],[\"0\",{\"1\":{\"8\":1,\"18\":2,\"20\":3,\"21\":1,\"23\":4,\"24\":2,\"34\":3,\"50\":4,\"63\":1,\"68\":2,\"70\":4}}],[\"0755\",{\"1\":{\"4\":1}}],[\"设置生产者内存缓冲区的大小\",{\"1\":{\"51\":1}}],[\"设置维护者信息\",{\"1\":{\"14\":1}}],[\"设置触发指令\",{\"1\":{\"13\":1}}],[\"设置执行后续指令的用户和可选的用户组\",{\"1\":{\"13\":1}}],[\"设置环境变量\",{\"1\":{\"13\":1,\"14\":1}}],[\"设置工作内存\",{\"1\":{\"8\":1}}],[\"设置工作目录\",{\"1\":{\"8\":1,\"13\":1,\"14\":1}}],[\"设置docker的apt存储库\",{\"1\":{\"4\":1}}],[\"挂载券\",{\"1\":{\"8\":1}}],[\"可选参数信息\",{\"1\":{\"57\":1}}],[\"可选字段\",{\"1\":{\"43\":1}}],[\"可附加的元数据\",{\"1\":{\"43\":1}}],[\"可靠地存储事件流\",{\"1\":{\"41\":1}}],[\"可观察性\",{\"1\":{\"16\":1}}],[\"可以把它设置为false\",{\"1\":{\"51\":1}}],[\"可以保存成百上千个属于不同主题和分区的副本\",{\"1\":{\"49\":1}}],[\"可以包含多个消息\",{\"1\":{\"45\":1}}],[\"可以包含多个partition\",{\"1\":{\"44\":1}}],[\"可以输出日志到文件\",{\"1\":{\"38\":1}}],[\"可以使用pluggable\",{\"1\":{\"66\":1}}],[\"可以使用lambda表达式创建一个函数式接口的对象\",{\"1\":{\"57\":1}}],[\"可以使用classname\",{\"1\":{\"55\":1}}],[\"可以使用其设计的一套无垃圾机制\",{\"1\":{\"38\":1}}],[\"可以使用\",{\"1\":{\"23\":1}}],[\"可以定义在主类上\",{\"1\":{\"22\":1}}],[\"可以被\",{\"1\":{\"13\":1}}],[\"可以通过修改daemon配置文件\",{\"1\":{\"4\":1}}],[\"可覆盖env中同名变量\",{\"1\":{\"8\":1}}],[\"环境变量\",{\"1\":{\"8\":1}}],[\"void\",{\"1\":{\"22\":1,\"34\":2,\"39\":2,\"51\":4,\"60\":1}}],[\"volume\",{\"1\":{\"10\":4,\"13\":3}}],[\"value=\",{\"1\":{\"70\":1}}],[\"value\",{\"1\":{\"43\":1,\"51\":3}}],[\"value>\",{\"1\":{\"13\":1}}],[\"var\",{\"1\":{\"8\":1}}],[\"v\",{\"1\":{\"8\":1,\"62\":1}}],[\"version=\",{\"1\":{\"70\":2}}],[\"version>\",{\"1\":{\"17\":1,\"32\":1,\"39\":6,\"68\":2}}],[\"version\",{\"1\":{\"6\":1,\"13\":1,\"20\":1,\"23\":2}}],[\"端口映射\",{\"1\":{\"8\":1}}],[\"numread\",{\"1\":{\"34\":2}}],[\"null\",{\"1\":{\"4\":1}}],[\"notnull\",{\"1\":{\"60\":1,\"62\":1,\"63\":2}}],[\"not\",{\"1\":{\"34\":2,\"71\":1}}],[\"no\",{\"1\":{\"33\":1}}],[\"node\",{\"1\":{\"14\":4,\"16\":1}}],[\"negate\",{\"1\":{\"63\":1}}],[\"new\",{\"1\":{\"18\":1,\"24\":3,\"34\":5,\"51\":1,\"55\":1}}],[\"network\",{\"1\":{\"9\":5}}],[\"nacos\",{\"1\":{\"17\":1,\"18\":1}}],[\"namespace=\",{\"1\":{\"70\":1}}],[\"namespace指向对应的接口类的路径\",{\"1\":{\"70\":1}}],[\"name=\",{\"1\":{\"70\":2}}],[\"name=value\",{\"1\":{\"8\":1}}],[\"name\",{\"1\":{\"8\":2,\"18\":4,\"50\":2,\"69\":1}}],[\"npm\",{\"1\":{\"14\":1}}],[\"交互模式和伪终端\",{\"1\":{\"8\":1}}],[\"交互模式\",{\"1\":{\"8\":1}}],[\"后台运行\",{\"1\":{\"8\":1}}],[\"选项\",{\"1\":{\"8\":1}}],[\"运行过程中调用实现了jsr\",{\"1\":{\"66\":1}}],[\"运行时能够解析的注解\",{\"1\":{\"65\":1}}],[\"运行时解析\",{\"0\":{\"65\":1}}],[\"运行容器\",{\"1\":{\"8\":1}}],[\"运行镜像\",{\"1\":{\"3\":1}}],[\"容器\",{\"1\":{\"38\":1}}],[\"容器id\",{\"1\":{\"8\":6,\"9\":2,\"50\":1}}],[\"容器停止后自动删除\",{\"1\":{\"8\":1}}],[\"容器管理\",{\"0\":{\"8\":1}}],[\"容器运行时\",{\"1\":{\"4\":1}}],[\"列出卷\",{\"1\":{\"10\":1}}],[\"列出网络\",{\"1\":{\"9\":1}}],[\"列出运行中的容器\",{\"1\":{\"8\":1}}],[\"列出本地镜像\",{\"1\":{\"7\":1}}],[\"列出所有容器\",{\"1\":{\"8\":1}}],[\"列出所有\",{\"1\":{\"6\":1}}],[\"拉取镜像\",{\"1\":{\"7\":1,\"50\":1}}],[\"镜像作为基础镜像\",{\"1\":{\"14\":1}}],[\"镜像构建过程的文件\",{\"1\":{\"13\":1}}],[\"镜像id\",{\"1\":{\"7\":1}}],[\"镜像名\",{\"1\":{\"7\":3,\"8\":1}}],[\"镜像管理\",{\"0\":{\"7\":1}}],[\"搜索镜像\",{\"1\":{\"7\":1}}],[\"命令行参数覆盖\",{\"1\":{\"13\":2}}],[\"命令\",{\"1\":{\"6\":1}}],[\"系统信息\",{\"1\":{\"6\":1}}],[\"版本中这里采用的是值的类型为duration\",{\"1\":{\"51\":1}}],[\"版本号等\",{\"1\":{\"43\":1}}],[\"版本开始就已经废弃\",{\"1\":{\"20\":1,\"21\":1}}],[\"版本\",{\"1\":{\"6\":1}}],[\"查看主题\",{\"1\":{\"50\":1}}],[\"查看程序状态\",{\"1\":{\"38\":1}}],[\"查看当前分支\",{\"1\":{\"30\":1}}],[\"查看全部可用配置参数\",{\"1\":{\"18\":1}}],[\"查看卷详细信息\",{\"1\":{\"10\":1}}],[\"查看容器日志\",{\"1\":{\"8\":1}}],[\"查看\",{\"1\":{\"6\":2}}],[\"更换镜像\",{\"1\":{\"4\":1}}],[\"winkky\",{\"1\":{\"70\":1}}],[\"winkik\",{\"1\":{\"27\":1}}],[\"winkit\",{\"1\":{\"0\":1}}],[\"wurstmeister\",{\"1\":{\"50\":4}}],[\"www\",{\"1\":{\"39\":3,\"51\":1,\"64\":1}}],[\"warn\",{\"1\":{\"38\":2}}],[\"warning\",{\"1\":{\"38\":3}}],[\"while\",{\"1\":{\"34\":1}}],[\"writebytes\",{\"1\":{\"34\":1}}],[\"web\",{\"1\":{\"16\":2}}],[\"workdir\",{\"1\":{\"13\":4,\"14\":1}}],[\"world\",{\"1\":{\"4\":1}}],[\"w\",{\"1\":{\"8\":1}}],[\"handle\",{\"1\":{\"66\":1}}],[\"hashmap<>\",{\"1\":{\"24\":1}}],[\"header\",{\"1\":{\"51\":1}}],[\"headers\",{\"1\":{\"43\":1}}],[\"help\",{\"1\":{\"6\":1}}],[\"hello\",{\"1\":{\"4\":1,\"50\":2,\"51\":1,\"60\":1}}],[\"html\",{\"1\":{\"39\":3,\"51\":1,\"64\":1}}],[\"http\",{\"1\":{\"38\":1,\"70\":2}}],[\"https\",{\"1\":{\"4\":4,\"26\":1,\"27\":1,\"39\":4,\"51\":1,\"64\":1}}],[\"host\",{\"1\":{\"8\":2}}],[\"验证\",{\"1\":{\"4\":1}}],[\"><\",{\"1\":{\"70\":1}}],[\">\",{\"1\":{\"4\":1,\"17\":3,\"34\":1,\"39\":5,\"51\":2,\"54\":1,\"55\":1,\"61\":1,\"62\":1,\"63\":2,\"68\":1,\"70\":8}}],[\"|\",{\"1\":{\"4\":1}}],[\"$version\",{\"1\":{\"4\":1}}],[\"$\",{\"1\":{\"4\":1}}],[\"$pkg\",{\"1\":{\"4\":1}}],[\"backend\",{\"0\":{\"73\":1}}],[\"batch\",{\"1\":{\"51\":1}}],[\"bash\",{\"1\":{\"8\":1,\"50\":1}}],[\"before\",{\"1\":{\"62\":1}}],[\"beginning\",{\"1\":{\"50\":1}}],[\"bean\",{\"1\":{\"18\":1,\"24\":1,\"33\":1}}],[\"broker\",{\"0\":{\"48\":1},\"1\":{\"48\":1,\"50\":2}}],[\"broker接收到生产者发送的消息后\",{\"1\":{\"46\":1}}],[\"branch\",{\"1\":{\"27\":1,\"30\":3}}],[\"byte\",{\"1\":{\"34\":3}}],[\"by=\",{\"1\":{\"4\":1}}],[\"bit\",{\"1\":{\"33\":1}}],[\"bin\",{\"1\":{\"8\":1,\"50\":5}}],[\"blocking\",{\"1\":{\"33\":1}}],[\"b\",{\"1\":{\"30\":1}}],[\"buffer\",{\"1\":{\"34\":3,\"51\":1}}],[\"bug\",{\"1\":{\"29\":1}}],[\"buildx\",{\"1\":{\"4\":1}}],[\"build\",{\"1\":{\"3\":1,\"7\":1,\"12\":1,\"13\":1,\"29\":1}}],[\"boolean\",{\"1\":{\"34\":2,\"63\":2}}],[\"boot<\",{\"1\":{\"68\":2}}],[\"boot集成kafka\",{\"0\":{\"51\":1}}],[\"bootstrap\",{\"1\":{\"50\":1,\"51\":1}}],[\"boot\",{\"1\":{\"17\":4,\"19\":1,\"22\":1,\"39\":1,\"51\":1,\"68\":2}}],[\"bom<\",{\"1\":{\"17\":1}}],[\"t>\",{\"1\":{\"60\":1,\"62\":1,\"63\":2}}],[\"tcp\",{\"1\":{\"50\":2}}],[\"timestamp\",{\"1\":{\"43\":1}}],[\"timeout\",{\"1\":{\"20\":1,\"23\":2,\"33\":1}}],[\"trace\",{\"1\":{\"38\":2}}],[\"true\",{\"1\":{\"34\":1,\"63\":1,\"70\":2}}],[\"try\",{\"1\":{\"34\":1}}],[\"tri\",{\"1\":{\"18\":1}}],[\"testslf4j\",{\"1\":{\"39\":2}}],[\"test\",{\"1\":{\"29\":1,\"51\":7,\"61\":2,\"63\":3}}],[\"tee\",{\"1\":{\"4\":2}}],[\"typealiases>\",{\"1\":{\"70\":1}}],[\"type\",{\"1\":{\"29\":1,\"70\":1}}],[\"type>\",{\"1\":{\"17\":1}}],[\"throwable\",{\"1\":{\"51\":3}}],[\"throw\",{\"1\":{\"34\":3}}],[\"throws\",{\"1\":{\"22\":1}}],[\"the\",{\"1\":{\"4\":1}}],[\"t\",{\"1\":{\"7\":1,\"8\":1,\"12\":2,\"50\":1,\"60\":2,\"61\":1,\"62\":2,\"63\":4}}],[\"tool\",{\"1\":{\"66\":1}}],[\"tojsonstring\",{\"1\":{\"51\":1}}],[\"topictest\",{\"1\":{\"51\":1}}],[\"topic名称\",{\"1\":{\"50\":1}}],[\"topics\",{\"1\":{\"50\":2,\"51\":2}}],[\"topic\",{\"0\":{\"44\":1},\"1\":{\"50\":3,\"51\":12}}],[\"tostring\",{\"1\":{\"34\":1,\"51\":1}}],[\"touch\",{\"1\":{\"12\":1}}],[\"to\",{\"1\":{\"4\":1,\"13\":1,\"70\":1}}],[\"other\",{\"1\":{\"63\":2}}],[\"ofnullable\",{\"1\":{\"51\":1}}],[\"offset\",{\"1\":{\"51\":1}}],[\"off\",{\"1\":{\"38\":3}}],[\"official\",{\"1\":{\"4\":1}}],[\"optional\",{\"1\":{\"51\":1}}],[\"optional<\",{\"1\":{\"51\":1}}],[\"open\",{\"1\":{\"34\":2}}],[\"openport\",{\"1\":{\"34\":3}}],[\"override\",{\"1\":{\"51\":2}}],[\"obj2string\",{\"1\":{\"51\":2}}],[\"obj\",{\"1\":{\"51\":3}}],[\"object>>\",{\"1\":{\"51\":2}}],[\"object>\",{\"1\":{\"51\":2}}],[\"object\",{\"1\":{\"39\":1,\"51\":2}}],[\"out\",{\"1\":{\"34\":1,\"60\":2,\"61\":1,\"62\":1}}],[\"onsuccess\",{\"1\":{\"51\":1}}],[\"onfailure\",{\"1\":{\"51\":1}}],[\"one\",{\"1\":{\"33\":1}}],[\"onbuild\",{\"1\":{\"13\":3}}],[\"or\",{\"1\":{\"30\":1,\"63\":1}}],[\"origin\",{\"1\":{\"27\":2}}],[\"org\",{\"1\":{\"22\":1,\"51\":4,\"70\":4}}],[\"os\",{\"1\":{\"4\":1}}],[\"o\",{\"1\":{\"4\":1}}],[\"fryer\",{\"1\":{\"69\":1}}],[\"from\",{\"1\":{\"13\":3,\"14\":1,\"50\":1}}],[\"function2\",{\"1\":{\"62\":1}}],[\"function1\",{\"1\":{\"62\":3}}],[\"function<\",{\"1\":{\"62\":1}}],[\"function<v\",{\"1\":{\"62\":1}}],[\"function<integer\",{\"1\":{\"62\":1}}],[\"function<string\",{\"1\":{\"55\":1}}],[\"function\",{\"1\":{\"60\":1}}],[\"functionalinterface注解\",{\"0\":{\"58\":1}}],[\"functionalinterface\",{\"1\":{\"57\":1}}],[\"future\",{\"1\":{\"51\":2}}],[\"field\",{\"1\":{\"65\":1}}],[\"final\",{\"1\":{\"51\":2}}],[\"finest\",{\"1\":{\"38\":1}}],[\"finer\",{\"1\":{\"38\":1}}],[\"fine\",{\"1\":{\"38\":1}}],[\"firewall\",{\"1\":{\"50\":3}}],[\"fix\",{\"1\":{\"29\":1}}],[\"flushiobuffers\",{\"1\":{\"34\":3}}],[\"factor\",{\"1\":{\"50\":2}}],[\"facade为门面对象\",{\"1\":{\"36\":1}}],[\"facade\",{\"1\":{\"36\":1,\"37\":2}}],[\"fatal\",{\"1\":{\"38\":4,\"51\":1}}],[\"false\",{\"1\":{\"34\":1,\"51\":2}}],[\"fazecast<\",{\"1\":{\"32\":1}}],[\"feature\",{\"1\":{\"29\":1}}],[\"feat\",{\"1\":{\"29\":2}}],[\"found\",{\"1\":{\"71\":1}}],[\"follower\",{\"1\":{\"49\":1}}],[\"foo\",{\"1\":{\"27\":1}}],[\"for\",{\"1\":{\"4\":1,\"37\":1}}],[\"fssl\",{\"1\":{\"4\":1}}],[\"earliest\",{\"1\":{\"51\":2}}],[\"error\",{\"1\":{\"38\":4,\"39\":2}}],[\"else\",{\"1\":{\"34\":3}}],[\"extends\",{\"1\":{\"62\":1}}],[\"exception\",{\"1\":{\"22\":1,\"34\":1}}],[\"expose\",{\"1\":{\"13\":3,\"14\":1}}],[\"example\",{\"1\":{\"13\":1,\"14\":1,\"70\":2}}],[\"executable\",{\"1\":{\"13\":2}}],[\"exec\",{\"1\":{\"8\":1,\"50\":1}}],[\"entity\",{\"1\":{\"70\":2}}],[\"entrypoint\",{\"1\":{\"13\":4}}],[\"en\",{\"1\":{\"70\":2}}],[\"encoding=\",{\"1\":{\"70\":2}}],[\"enable\",{\"1\":{\"51\":1}}],[\"enabledubbo\",{\"0\":{\"22\":1},\"1\":{\"19\":2,\"22\":4}}],[\"env=production\",{\"1\":{\"14\":1}}],[\"env\",{\"1\":{\"8\":1,\"13\":3,\"14\":1,\"70\":1}}],[\"engine\",{\"1\":{\"4\":1}}],[\"e\",{\"1\":{\"8\":1,\"34\":2,\"50\":4,\"62\":2}}],[\"eof\",{\"1\":{\"4\":2}}],[\"echo\",{\"1\":{\"4\":2}}],[\"etc\",{\"1\":{\"4\":9}}],[\"msg\",{\"1\":{\"51\":2}}],[\"mode\",{\"1\":{\"51\":1}}],[\"missing\",{\"1\":{\"51\":1}}],[\"miniprogram\",{\"1\":{\"29\":1}}],[\"mirror非标准包下\",{\"1\":{\"66\":1}}],[\"mirror\",{\"1\":{\"4\":1}}],[\"mirrors\",{\"1\":{\"4\":1}}],[\"method\",{\"1\":{\"55\":1,\"65\":1}}],[\"message\",{\"1\":{\"51\":4}}],[\"message格式\",{\"0\":{\"29\":1}}],[\"memory\",{\"1\":{\"51\":1}}],[\"memory=\",{\"1\":{\"8\":1}}],[\"merge\",{\"1\":{\"30\":1}}],[\"map\",{\"1\":{\"70\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"70\":1}}],[\"mapper>\",{\"1\":{\"70\":1}}],[\"mapperscan\",{\"1\":{\"70\":1}}],[\"mapper\",{\"1\":{\"70\":7}}],[\"mapper文件存放地址\",{\"1\":{\"70\":1}}],[\"map<string\",{\"1\":{\"24\":1}}],[\"manual\",{\"1\":{\"51\":1}}],[\"master\",{\"1\":{\"30\":1}}],[\"main\",{\"1\":{\"22\":2,\"27\":2}}],[\"maintainer=\",{\"1\":{\"13\":1,\"14\":1}}],[\"maven\",{\"1\":{\"17\":1}}],[\"mysql\",{\"1\":{\"68\":1,\"69\":2}}],[\"mybatis配置文件\",{\"1\":{\"70\":1}}],[\"mybatis相关配置\",{\"0\":{\"70\":1}}],[\"mybatis\",{\"1\":{\"68\":1,\"70\":12}}],[\"myvol\",{\"1\":{\"13\":1}}],[\"my\",{\"1\":{\"12\":3}}],[\"mkdir\",{\"1\":{\"4\":1,\"12\":1}}],[\"m\",{\"1\":{\"4\":1,\"27\":2}}],[\"cj\",{\"1\":{\"69\":1}}],[\"cnblogs\",{\"1\":{\"39\":3,\"64\":1}}],[\"cn\",{\"1\":{\"39\":1}}],[\"characterencoding=utf\",{\"1\":{\"69\":1}}],[\"char\",{\"1\":{\"34\":2}}],[\"checkout\",{\"1\":{\"30\":2}}],[\"chore\",{\"1\":{\"29\":1}}],[\"chmod\",{\"1\":{\"4\":1}}],[\"closeport\",{\"1\":{\"34\":3}}],[\"cloud\",{\"1\":{\"70\":1}}],[\"cloud的关系\",{\"1\":{\"16\":1}}],[\"cloud一样提供了一套微服务整体解决方案\",{\"1\":{\"16\":1}}],[\"classpath\",{\"1\":{\"70\":2}}],[\"classic<\",{\"1\":{\"39\":1}}],[\"classic\",{\"1\":{\"38\":1}}],[\"class\",{\"1\":{\"18\":2,\"20\":2,\"21\":1,\"22\":2,\"24\":2,\"33\":1,\"34\":1,\"39\":1,\"51\":4,\"65\":1,\"69\":1}}],[\"client\",{\"1\":{\"38\":1}}],[\"cli\",{\"1\":{\"4\":1}}],[\"cmd\",{\"1\":{\"13\":4,\"14\":1,\"50\":3}}],[\"cd\",{\"1\":{\"12\":1}}],[\"create\",{\"1\":{\"9\":1,\"10\":1,\"50\":1}}],[\"cpus=\",{\"1\":{\"8\":1}}],[\"ce\",{\"1\":{\"4\":2}}],[\"certificates\",{\"1\":{\"4\":1}}],[\"curl\",{\"1\":{\"4\":2,\"13\":1}}],[\"case\",{\"1\":{\"70\":1}}],[\"camel\",{\"1\":{\"70\":1}}],[\"catch\",{\"1\":{\"34\":1}}],[\"ca\",{\"1\":{\"4\":1}}],[\"core\",{\"1\":{\"38\":2}}],[\"copy\",{\"1\":{\"13\":4,\"14\":2}}],[\"concurrency\",{\"1\":{\"51\":1}}],[\"constructor\",{\"1\":{\"65\":1}}],[\"console\",{\"1\":{\"50\":2}}],[\"consumer2\",{\"1\":{\"60\":1}}],[\"consumer1\",{\"1\":{\"60\":1}}],[\"consumer<\",{\"1\":{\"60\":1}}],[\"consumer<t>\",{\"1\":{\"60\":1}}],[\"consumerrecord<\",{\"1\":{\"51\":1}}],[\"consumer\",{\"0\":{\"47\":1},\"1\":{\"16\":1,\"50\":1,\"51\":2,\"60\":3}}],[\"configuration>\",{\"1\":{\"70\":1}}],[\"configuration\",{\"1\":{\"18\":1,\"24\":1,\"33\":1,\"70\":2}}],[\"config\",{\"0\":{\"24\":1},\"1\":{\"18\":2,\"23\":1,\"24\":1,\"38\":1,\"70\":7}}],[\"connector\",{\"1\":{\"68\":2}}],[\"connect=换成你的服务器ip\",{\"1\":{\"50\":1}}],[\"connect\",{\"1\":{\"9\":1}}],[\"container\",{\"1\":{\"8\":4,\"13\":1}}],[\"containerd\",{\"1\":{\"4\":2}}],[\"codename\",{\"1\":{\"4\":1}}],[\"common\",{\"1\":{\"51\":4}}],[\"commons\",{\"1\":{\"35\":1,\"37\":3}}],[\"commit作用范围\",{\"1\":{\"29\":1}}],[\"commit\",{\"0\":{\"29\":1},\"1\":{\"27\":2,\"51\":2}}],[\"com2\",{\"1\":{\"33\":1}}],[\"component\",{\"1\":{\"21\":1,\"34\":1,\"51\":2}}],[\"compose\",{\"1\":{\"4\":2,\"62\":2}}],[\"com\",{\"1\":{\"4\":4,\"13\":1,\"14\":1,\"26\":1,\"27\":1,\"39\":3,\"51\":1,\"64\":1,\"69\":1,\"70\":3}}],[\"gc\",{\"1\":{\"38\":1}}],[\"github\",{\"1\":{\"27\":1}}],[\"git\",{\"1\":{\"26\":1,\"27\":7,\"30\":7}}],[\"git相关\",{\"0\":{\"25\":1}}],[\"groupid\",{\"1\":{\"51\":1}}],[\"groupid>\",{\"1\":{\"17\":4,\"32\":1,\"39\":6,\"51\":1,\"68\":3}}],[\"group\",{\"1\":{\"20\":1,\"23\":2,\"51\":3}}],[\"go\",{\"1\":{\"16\":1}}],[\"gpg\",{\"1\":{\"4\":2}}],[\"getter注解的实现是handlegetter\",{\"1\":{\"66\":1}}],[\"getmessage\",{\"1\":{\"51\":1}}],[\"getlogger\",{\"1\":{\"39\":1,\"51\":2}}],[\"getbytes\",{\"1\":{\"34\":1}}],[\"getcommport\",{\"1\":{\"33\":1}}],[\"get\",{\"1\":{\"4\":5,\"13\":2,\"51\":1,\"61\":2}}],[\"sh\",{\"1\":{\"50\":4}}],[\"size\",{\"1\":{\"51\":1}}],[\"simple<\",{\"1\":{\"39\":1}}],[\"simple\",{\"1\":{\"37\":1}}],[\"signed\",{\"1\":{\"4\":1}}],[\"synchronized\",{\"1\":{\"34\":1}}],[\"system\",{\"1\":{\"34\":1,\"60\":2,\"61\":1,\"62\":1}}],[\"systemctl\",{\"1\":{\"4\":2}}],[\"switch\",{\"1\":{\"30\":1}}],[\"sun\",{\"1\":{\"66\":1}}],[\"supplier\",{\"1\":{\"61\":2}}],[\"supplier<string>\",{\"1\":{\"61\":1}}],[\"super\",{\"1\":{\"60\":1,\"62\":1,\"63\":2}}],[\"subject\",{\"1\":{\"29\":1}}],[\"sudo\",{\"1\":{\"4\":14}}],[\"scope\",{\"1\":{\"29\":1}}],[\"scope>\",{\"1\":{\"17\":1}}],[\"scm\",{\"1\":{\"26\":1}}],[\"scanbasepackages\",{\"1\":{\"22\":1}}],[\"slf4j注解\",{\"1\":{\"39\":2}}],[\"slf4j<\",{\"1\":{\"39\":3}}],[\"slf4j\",{\"1\":{\"18\":1,\"37\":1,\"38\":1,\"39\":1}}],[\"slim\",{\"1\":{\"13\":1}}],[\"springframework\",{\"1\":{\"51\":1,\"68\":1}}],[\"spring中使用lombok仍需引入日志门面\",{\"1\":{\"39\":1}}],[\"springapplication\",{\"1\":{\"22\":1}}],[\"springboot整合mybatis\",{\"0\":{\"67\":1}}],[\"springbootapplication\",{\"1\":{\"22\":1}}],[\"springboot\",{\"1\":{\"18\":2,\"22\":1,\"38\":1}}],[\"spring\",{\"0\":{\"51\":1},\"1\":{\"17\":4,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"39\":1,\"51\":1,\"68\":2,\"69\":1}}],[\"severe\",{\"1\":{\"38\":1}}],[\"sendresult<string\",{\"1\":{\"51\":1}}],[\"send\",{\"1\":{\"51\":2}}],[\"sendandrecvsync\",{\"1\":{\"34\":1}}],[\"senddata\",{\"1\":{\"34\":2}}],[\"serialization\",{\"1\":{\"51\":4}}],[\"serializer\",{\"1\":{\"51\":2}}],[\"serial\",{\"1\":{\"34\":2}}],[\"serialservice\",{\"1\":{\"34\":1}}],[\"serialport\",{\"1\":{\"33\":14,\"34\":12}}],[\"serialconfig\",{\"1\":{\"33\":1}}],[\"servlet\",{\"1\":{\"38\":1}}],[\"servicebean\",{\"1\":{\"24\":3}}],[\"serviceconfig\",{\"1\":{\"18\":3}}],[\"service\",{\"1\":{\"18\":6,\"20\":2,\"24\":7}}],[\"servers\",{\"1\":{\"51\":1}}],[\"server\",{\"1\":{\"14\":1,\"50\":1}}],[\"settings>\",{\"1\":{\"70\":1}}],[\"setlength\",{\"1\":{\"34\":1}}],[\"setparity\",{\"1\":{\"33\":1}}],[\"setparameters\",{\"1\":{\"24\":1}}],[\"setnumstopbits\",{\"1\":{\"33\":1}}],[\"setnumdatabits\",{\"1\":{\"33\":1}}],[\"setcomporttimeouts\",{\"1\":{\"33\":1}}],[\"setbaudrate\",{\"1\":{\"33\":1}}],[\"setversion\",{\"1\":{\"24\":1}}],[\"setgroup\",{\"1\":{\"24\":1}}],[\"setref\",{\"1\":{\"24\":1}}],[\"setregistry\",{\"1\":{\"18\":1}}],[\"setinterface\",{\"1\":{\"24\":1}}],[\"search\",{\"1\":{\"7\":1}}],[\"src\",{\"1\":{\"13\":1,\"14\":1}}],[\"style\",{\"1\":{\"29\":1}}],[\"stringtointeger\",{\"1\":{\"55\":1}}],[\"stringobjectsendresult\",{\"1\":{\"51\":2}}],[\"stringdeserializer\",{\"1\":{\"51\":2}}],[\"stringserializer\",{\"1\":{\"51\":2}}],[\"stringbuilder\",{\"1\":{\"34\":2}}],[\"string>\",{\"1\":{\"24\":1}}],[\"string\",{\"1\":{\"22\":1,\"34\":6,\"51\":4,\"55\":1}}],[\"statements\",{\"1\":{\"54\":1}}],[\"static\",{\"1\":{\"22\":1,\"51\":2}}],[\"starter中已存在日志实现相关依赖\",{\"1\":{\"39\":1}}],[\"starter<\",{\"1\":{\"17\":3,\"68\":1}}],[\"starter\",{\"1\":{\"17\":2,\"68\":1}}],[\"start\",{\"1\":{\"8\":1}}],[\"stable\",{\"1\":{\"4\":1}}],[\"stop\",{\"1\":{\"8\":1,\"33\":1}}],[\"sources\",{\"1\":{\"4\":2}}],[\"s\",{\"1\":{\"4\":1,\"55\":2}}],[\"airfryer\",{\"1\":{\"70\":1}}],[\"air\",{\"1\":{\"69\":1}}],[\"ast\",{\"1\":{\"66\":4}}],[\"asc\",{\"1\":{\"4\":3}}],[\"annotation\",{\"1\":{\"66\":3}}],[\"and\",{\"1\":{\"63\":1}}],[\"andthen\",{\"1\":{\"60\":3}}],[\"after\",{\"1\":{\"60\":1}}],[\"auto\",{\"1\":{\"51\":3,\"66\":1}}],[\"accept\",{\"1\":{\"60\":3}}],[\"access\",{\"1\":{\"38\":1}}],[\"acknowledge\",{\"1\":{\"51\":1}}],[\"acknowledgment\",{\"1\":{\"51\":1}}],[\"ack\",{\"1\":{\"51\":3}}],[\"acks\",{\"1\":{\"51\":1}}],[\"acks=all\",{\"1\":{\"51\":1}}],[\"acks=1\",{\"1\":{\"51\":1}}],[\"acks=0\",{\"1\":{\"51\":1}}],[\"aliases\",{\"1\":{\"70\":1}}],[\"aliyuncs\",{\"1\":{\"4\":1}}],[\"all\",{\"1\":{\"38\":3}}],[\"advertised\",{\"1\":{\"50\":1}}],[\"admin\",{\"1\":{\"16\":1}}],[\"addcallback\",{\"1\":{\"51\":1}}],[\"address\",{\"1\":{\"18\":3}}],[\"add\",{\"1\":{\"4\":2,\"13\":6,\"27\":2,\"50\":2}}],[\"article\",{\"1\":{\"51\":1}}],[\"artifactid>\",{\"1\":{\"17\":4,\"32\":1,\"39\":6,\"51\":1,\"68\":3}}],[\"args\",{\"1\":{\"22\":2}}],[\"arg\",{\"1\":{\"13\":3}}],[\"architecture\",{\"1\":{\"4\":1}}],[\"arch=$\",{\"1\":{\"4\":1}}],[\"api的lombok程序\",{\"1\":{\"66\":1}}],[\"api的程序\",{\"1\":{\"66\":1}}],[\"api\",{\"1\":{\"66\":1}}],[\"api都在com\",{\"1\":{\"66\":1}}],[\"api来替换它\",{\"1\":{\"66\":1}}],[\"api<\",{\"1\":{\"39\":1}}],[\"apache\",{\"1\":{\"16\":1,\"17\":4,\"22\":1,\"37\":2,\"38\":1,\"51\":4}}],[\"apply\",{\"1\":{\"62\":3}}],[\"application\",{\"0\":{\"18\":1},\"1\":{\"18\":3,\"51\":1,\"70\":1}}],[\"appener\",{\"1\":{\"38\":1}}],[\"append\",{\"1\":{\"34\":1}}],[\"appuser\",{\"1\":{\"13\":1}}],[\"app\",{\"1\":{\"12\":3,\"13\":6,\"14\":1}}],[\"apt被替换主要有2点原因\",{\"1\":{\"66\":1}}],[\"apt自jdk5产生\",{\"1\":{\"66\":1}}],[\"apt\",{\"1\":{\"4\":11,\"13\":2}}],[\"a\",{\"1\":{\"8\":1}}],[\"a+r\",{\"1\":{\"4\":1}}],[\"root\",{\"1\":{\"69\":1}}],[\"r>\",{\"1\":{\"62\":1}}],[\"r\",{\"1\":{\"62\":1}}],[\"rpc\",{\"1\":{\"16\":4}}],[\"rm\",{\"1\":{\"8\":2,\"9\":1,\"10\":1}}],[\"rmi\",{\"1\":{\"7\":1}}],[\"record\",{\"1\":{\"51\":2}}],[\"received\",{\"1\":{\"51\":1}}],[\"receivedchar\",{\"1\":{\"34\":3}}],[\"receivedata\",{\"1\":{\"34\":2}}],[\"retention设置为runtime\",{\"1\":{\"65\":1}}],[\"retries\",{\"1\":{\"51\":1}}],[\"return\",{\"1\":{\"18\":1,\"24\":1,\"33\":1,\"34\":3}}],[\"replication\",{\"1\":{\"50\":2}}],[\"replicas\",{\"0\":{\"49\":1}}],[\"repository\",{\"1\":{\"4\":1}}],[\"reset\",{\"1\":{\"51\":1}}],[\"res\",{\"1\":{\"34\":5}}],[\"result\",{\"1\":{\"34\":3}}],[\"resources\",{\"1\":{\"70\":2}}],[\"resource\",{\"1\":{\"34\":1,\"51\":1}}],[\"restart\",{\"1\":{\"4\":1,\"8\":1}}],[\"readbytes\",{\"1\":{\"34\":1}}],[\"readbuffer\",{\"1\":{\"34\":4}}],[\"read\",{\"1\":{\"33\":1}}],[\"revert\",{\"1\":{\"29\":1}}],[\"reflect反射包中提供了一个接口annotatedelement\",{\"1\":{\"65\":1}}],[\"refactor\",{\"1\":{\"29\":1}}],[\"reference\",{\"1\":{\"18\":2,\"21\":2}}],[\"remote\",{\"1\":{\"27\":1}}],[\"remove\",{\"1\":{\"4\":1}}],[\"reload\",{\"1\":{\"4\":1,\"50\":1}}],[\"release\",{\"1\":{\"4\":1}}],[\"registry=\",{\"1\":{\"18\":1}}],[\"registry\",{\"1\":{\"4\":1,\"18\":5}}],[\"runtimeexception\",{\"1\":{\"34\":1}}],[\"runc\",{\"1\":{\"4\":1}}],[\"run\",{\"1\":{\"3\":1,\"4\":1,\"8\":1,\"13\":6,\"14\":1,\"22\":1,\"50\":2}}],[\"rust\",{\"0\":{\"1\":1,\"72\":1},\"1\":{\"16\":1}}],[\"ienvdao\",{\"1\":{\"70\":1}}],[\"ispresent\",{\"1\":{\"51\":1}}],[\"is\",{\"1\":{\"34\":2}}],[\"isopen\",{\"1\":{\"34\":3}}],[\"illegalstateexception\",{\"1\":{\"34\":2}}],[\"if\",{\"1\":{\"34\":5,\"51\":1}}],[\"img\",{\"1\":{\"66\":1}}],[\"immediate\",{\"1\":{\"51\":1}}],[\"implements\",{\"1\":{\"18\":1,\"20\":2}}],[\"images\",{\"1\":{\"7\":1}}],[\"id=0\",{\"1\":{\"50\":1}}],[\"id\",{\"1\":{\"18\":2,\"43\":1}}],[\"it\",{\"1\":{\"8\":2,\"50\":1}}],[\"i\",{\"1\":{\"8\":1}}],[\"io\",{\"1\":{\"4\":2}}],[\"interface\",{\"1\":{\"57\":1}}],[\"interval\",{\"1\":{\"51\":1}}],[\"integer\",{\"1\":{\"55\":2}}],[\"integer>\",{\"1\":{\"55\":1,\"62\":1}}],[\"int\",{\"1\":{\"34\":1}}],[\"initial\",{\"1\":{\"27\":1}}],[\"init\",{\"1\":{\"27\":1}}],[\"inspect\",{\"1\":{\"10\":1}}],[\"install\",{\"1\":{\"4\":4,\"13\":1,\"14\":1}}],[\"info\",{\"1\":{\"6\":1,\"38\":5,\"51\":4}}],[\"in\",{\"1\":{\"4\":1,\"8\":1,\"13\":1}}],[\"pluggable\",{\"1\":{\"66\":1}}],[\"plugin\",{\"1\":{\"4\":2}}],[\"permanent\",{\"1\":{\"50\":2}}],[\"perf\",{\"1\":{\"29\":1}}],[\"push\",{\"1\":{\"27\":1}}],[\"public\",{\"1\":{\"18\":3,\"20\":2,\"21\":1,\"22\":2,\"24\":2,\"33\":2,\"34\":6,\"39\":2,\"51\":8,\"60\":1,\"62\":1,\"63\":3,\"70\":2}}],[\"pull\",{\"1\":{\"3\":1,\"7\":1,\"50\":2}}],[\"predicate<\",{\"1\":{\"63\":2}}],[\"predicate<t>\",{\"1\":{\"63\":3}}],[\"predicate<integer>\",{\"1\":{\"63\":1}}],[\"predicate\",{\"1\":{\"63\":2}}],[\"private\",{\"1\":{\"21\":1,\"34\":1,\"51\":3}}],[\"println\",{\"1\":{\"34\":1,\"60\":2,\"61\":1,\"62\":1}}],[\"print\",{\"1\":{\"4\":1}}],[\"processing\",{\"1\":{\"66\":3}}],[\"producer\",{\"0\":{\"46\":1},\"1\":{\"50\":1,\"51\":1}}],[\"projectlombok<\",{\"1\":{\"39\":1}}],[\"properties\",{\"1\":{\"18\":1,\"23\":1}}],[\"protocol\",{\"1\":{\"18\":2}}],[\"providerapplication\",{\"1\":{\"22\":2}}],[\"providerconfiguration\",{\"1\":{\"18\":1,\"24\":1}}],[\"provider\",{\"1\":{\"16\":1,\"18\":2,\"22\":1}}],[\"py\",{\"1\":{\"13\":2}}],[\"python\",{\"1\":{\"12\":1,\"13\":3}}],[\"password\",{\"1\":{\"69\":1}}],[\"password=nacos\",{\"1\":{\"18\":1}}],[\"parseint\",{\"1\":{\"55\":2}}],[\"partitions\",{\"1\":{\"50\":2}}],[\"partition\",{\"0\":{\"45\":1}}],[\"parity\",{\"1\":{\"33\":1}}],[\"parameters\",{\"1\":{\"24\":2,\"54\":1}}],[\"param2\",{\"1\":{\"13\":3,\"62\":1}}],[\"param1\",{\"1\":{\"13\":3,\"62\":2}}],[\"package等都实现了该接口\",{\"1\":{\"65\":1}}],[\"package\",{\"1\":{\"14\":3,\"22\":2,\"70\":1}}],[\"path\",{\"1\":{\"8\":3,\"13\":2}}],[\"ps\",{\"1\":{\"8\":2}}],[\"posts\",{\"0\":{\"74\":1}}],[\"post\",{\"1\":{\"39\":1}}],[\"pom\",{\"1\":{\"17\":1}}],[\"port=9092\",{\"1\":{\"50\":1}}],[\"port=2181\",{\"1\":{\"50\":1}}],[\"port\",{\"1\":{\"8\":2,\"18\":2,\"34\":2}}],[\"podman\",{\"1\":{\"4\":1}}],[\"p\",{\"1\":{\"4\":1,\"8\":1,\"39\":3,\"50\":2,\"64\":1}}],[\"pkg\",{\"1\":{\"4\":1}}],[\"卸载冲突包\",{\"1\":{\"4\":1}}],[\"详见仓库操作示例\",{\"1\":{\"15\":1}}],[\"详见\",{\"1\":{\"4\":1}}],[\"架构\",{\"0\":{\"3\":1}}],[\"dtd\",{\"1\":{\"70\":6}}],[\"driver\",{\"1\":{\"69\":2}}],[\"dao\",{\"1\":{\"70\":1}}],[\"dagger等等\",{\"1\":{\"66\":1}}],[\"datasource\",{\"1\":{\"69\":1}}],[\"data注解所在类对应的语法树\",{\"1\":{\"66\":1}}],[\"databuffer\",{\"1\":{\"34\":4}}],[\"data\",{\"1\":{\"34\":4,\"68\":1}}],[\"daemon\",{\"1\":{\"4\":3}}],[\"ddress\",{\"1\":{\"18\":1}}],[\"dubboreference\",{\"0\":{\"21\":1},\"1\":{\"19\":2,\"21\":3,\"23\":2,\"24\":1}}],[\"dubboservice\",{\"0\":{\"20\":1},\"1\":{\"18\":1,\"19\":2,\"20\":5,\"23\":2,\"24\":1}}],[\"dubbo<\",{\"1\":{\"17\":4}}],[\"dubbo从抽象架构上分为两层\",{\"1\":{\"16\":1}}],[\"dubbo架构\",{\"1\":{\"16\":1}}],[\"dubbo与spring\",{\"1\":{\"16\":1}}],[\"dubbo不仅是一个高性能的rpc框架\",{\"1\":{\"16\":1}}],[\"dubbo\",{\"1\":{\"16\":11,\"18\":6,\"19\":2,\"20\":2,\"21\":1,\"22\":2,\"23\":1}}],[\"dubbo相关\",{\"0\":{\"16\":1}}],[\"disconnect\",{\"1\":{\"9\":1}}],[\"default以及object类所有的方法\",{\"1\":{\"57\":1}}],[\"deserializer\",{\"1\":{\"51\":2}}],[\"democlient\",{\"1\":{\"21\":1}}],[\"demoservice\",{\"1\":{\"18\":2,\"20\":2,\"21\":3,\"24\":2}}],[\"demoserviceimpl\",{\"1\":{\"18\":1,\"20\":2,\"24\":1}}],[\"demo\",{\"1\":{\"18\":2,\"22\":1}}],[\"dependencymanagement>\",{\"1\":{\"17\":1}}],[\"dependency>\",{\"1\":{\"17\":4,\"32\":1,\"39\":6,\"51\":1,\"68\":3}}],[\"dependencies>\",{\"1\":{\"17\":2}}],[\"dev\",{\"1\":{\"4\":1,\"20\":1,\"23\":2,\"24\":1,\"30\":7}}],[\"debug\",{\"1\":{\"38\":4}}],[\"debug=true\",{\"1\":{\"13\":1}}],[\"deb\",{\"1\":{\"4\":1}}],[\"debian\",{\"0\":{\"4\":1},\"1\":{\"4\":3}}],[\"dpkg\",{\"1\":{\"4\":1}}],[\"d\",{\"1\":{\"4\":2,\"8\":1,\"30\":1,\"50\":2}}],[\"downloads\",{\"1\":{\"26\":1}}],[\"download\",{\"1\":{\"4\":2}}],[\"done\",{\"1\":{\"4\":1}}],[\"do\",{\"1\":{\"4\":1}}],[\"doctype\",{\"1\":{\"70\":2}}],[\"doc\",{\"1\":{\"4\":1}}],[\"docs\",{\"1\":{\"4\":1,\"29\":1}}],[\"docker部署kafka\",{\"0\":{\"50\":1}}],[\"dockerfile\",{\"1\":{\"12\":1,\"13\":3}}],[\"dockerfile路径\",{\"1\":{\"7\":1}}],[\"docker\",{\"1\":{\"3\":3,\"4\":21,\"6\":6,\"7\":5,\"8\":9,\"9\":5,\"10\":4,\"12\":3,\"13\":3,\"50\":5}}],[\"docker相关\",{\"0\":{\"2\":1}}],[\"dspfomrepv\",{\"1\":{\"1\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
